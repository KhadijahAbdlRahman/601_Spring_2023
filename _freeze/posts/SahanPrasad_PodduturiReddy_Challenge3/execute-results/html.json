{
  "hash": "d2a6c44c64100e7b77c806931d43765b",
  "result": {
    "markdown": "---\ntitle: \"Tidy Australian Marriage data\"\nauthor: \"Sahan Prasad Podduturi Reddy\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"03/18/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - australian_marriage\n  - Sahan Prasad Podduturi Reddy\n---\n\n## Introduction\n\nI was trying to analyze the 'australian_marriage\\*.xls' dataset by splitting the dataset into two separate dataframes and then tidying the data to interpret the results. This dataset summarizes the responses given by eligible participants of the Australian Marriage Law Postal Survey, 2017. We first start by importing the necessary libraries and setting the working directory to point to the location where the spreadsheet is located.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(DescTools)\nlibrary(kableExtra)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\n```\n:::\n\n\n## Read in the Data\n\nLooking at the dataset, we can see that the data can be split up into two separate dataframes which makes it much easier to understand the context of the data we are trying to analyze. We use read_excel() to read in the excel sheet and then use \"sheet=2\" and \"skip=6\" as parameters. This removes the first six lines of the sheet as we import data into our dataframe. We can then assign a different column name to each column using colnames().We then use slice() to get only the data regarding the states/territories and ignore the remaining text in the spreadsheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\ndataframe <- read_excel(\"australian_marriage_law_postal_survey_2017_-_response_final.xls\", sheet = 2, skip = 6)\ndataframe <- slice(dataframe, 1:9)\ncolnames(dataframe) <- c(\"State/Territory\", \"Response Clear Yes\", \"Response Clear Yes %\", \"Response Clear No\", \"Response Clear No %\", \"Response Clear Total\", \"Response Clear Total %\", \"Blank\", \"Response Clear Total Eligible\", \"Response Clear Total Eligible %\", \"Response Not Clear Total Eligible\", \"Response Not Clear Total Eligible %\", \"No Response\", \"No Response %\", \"Total\", \"Total %\")\nprint(dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 16\n  State/…¹ Respo…² Respo…³ Respo…⁴ Respo…⁵ Respo…⁶ Respo…⁷ Blank Respo…⁸ Respo…⁹\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>   <dbl>   <dbl>\n1 New Sou… 2374362    57.8 1736838    42.2  4.11e6     100 NA     4.11e6    79.2\n2 Victoria 2145629    64.9 1161098    35.1  3.31e6     100 NA     3.31e6    81.4\n3 Queensl… 1487060    60.7  961015    39.3  2.45e6     100 NA     2.45e6    77.7\n4 South A…  592528    62.5  356247    37.5  9.49e5     100 NA     9.49e5    79.5\n5 Western…  801575    63.7  455924    36.3  1.26e6     100 NA     1.26e6    78.3\n6 Tasmania  191948    63.6  109655    36.4  3.02e5     100 NA     3.02e5    79.5\n7 Norther…   48686    60.6   31690    39.4  8.04e4     100 NA     8.04e4    58.2\n8 Austral…  175459    74     61520    26    2.37e5     100 NA     2.37e5    82.3\n9 Austral… 7817247    61.6 4873987    38.4  1.27e7     100 NA     1.27e7    79.3\n# … with 6 more variables: `Response Not Clear Total Eligible` <dbl>,\n#   `Response Not Clear Total Eligible %` <dbl>, `No Response` <dbl>,\n#   `No Response %` <dbl>, Total <dbl>, `Total %` <dbl>, and abbreviated\n#   variable names ¹​`State/Territory`, ²​`Response Clear Yes`,\n#   ³​`Response Clear Yes %`, ⁴​`Response Clear No`, ⁵​`Response Clear No %`,\n#   ⁶​`Response Clear Total`, ⁷​`Response Clear Total %`,\n#   ⁸​`Response Clear Total Eligible`, ⁹​`Response Clear Total Eligible %`\n```\n:::\n:::\n\n\n## Brief Description\nWe first create a subset containing information on total number of 1)clear responses, 2)unclear responses, and 3)no responses by eligible participants in the survey over different states/territories. Then from this subset, we select only the participants from the \"Clear Response\" column and analyze their responses to the survey in another dataframe.\n\nIn our third dataframe, we take the number of clear responses and sort them by 'Yes' and 'No' Response per each state and calculate how much they account for over the total Response Count. This is the data that we are trying to tidy. We are trying to clean this data because the format can be better. Currently we have separate columns for 'Yes' and 'No' response counts. We can easily group these into a name column named \"Response\" holding the response value using pivot_longer() and place the response counts in a separate Response Count column. This makes it much simpler to interpret the data at a glance.\n\nWe can use nrow() and ncol() to find that the current dataset we're working with has 9 rows and 4 cols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataframe2 <- select(dataframe, \"State/Territory\", \"Response Clear Total Eligible\", \"Response Clear Total Eligible %\", \"Response Not Clear Total Eligible\", \"Response Not Clear Total Eligible %\", \"No Response\", \"No Response %\", \"Total\", \"Total %\")\ncolnames(dataframe2) <- c(\"State/Territory\", \"Clear Response\", \"Clear Response %\", \"Unclear Response\", \"Unclear Response %\", \"No Response\", \"No Response %\", \"Total Eligible Participants\", \"Total %\")\n\nkable(select(dataframe2, \"State/Territory\", \"Clear Response\", \"Unclear Response\", \"No Response\", \"Total Eligible Participants\"), \"html\") %>% \n  column_spec(2, background = \"yellow\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> State/Territory </th>\n   <th style=\"text-align:right;\"> Clear Response </th>\n   <th style=\"text-align:right;\"> Unclear Response </th>\n   <th style=\"text-align:right;\"> No Response </th>\n   <th style=\"text-align:right;\"> Total Eligible Participants </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> New South Wales </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 4111200 </td>\n   <td style=\"text-align:right;\"> 11036 </td>\n   <td style=\"text-align:right;\"> 1065445 </td>\n   <td style=\"text-align:right;\"> 5187681 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Victoria </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 3306727 </td>\n   <td style=\"text-align:right;\"> 11028 </td>\n   <td style=\"text-align:right;\"> 743634 </td>\n   <td style=\"text-align:right;\"> 4061389 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Queensland </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 2448075 </td>\n   <td style=\"text-align:right;\"> 7088 </td>\n   <td style=\"text-align:right;\"> 695710 </td>\n   <td style=\"text-align:right;\"> 3150873 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> South Australia </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 948775 </td>\n   <td style=\"text-align:right;\"> 2778 </td>\n   <td style=\"text-align:right;\"> 242027 </td>\n   <td style=\"text-align:right;\"> 1193580 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Western Australia </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 1257499 </td>\n   <td style=\"text-align:right;\"> 3188 </td>\n   <td style=\"text-align:right;\"> 346333 </td>\n   <td style=\"text-align:right;\"> 1607020 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Tasmania </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 301603 </td>\n   <td style=\"text-align:right;\"> 805 </td>\n   <td style=\"text-align:right;\"> 77020 </td>\n   <td style=\"text-align:right;\"> 379428 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Northern Territory(b) </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 80376 </td>\n   <td style=\"text-align:right;\"> 229 </td>\n   <td style=\"text-align:right;\"> 57496 </td>\n   <td style=\"text-align:right;\"> 138101 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Australian Capital Territory(c) </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 236979 </td>\n   <td style=\"text-align:right;\"> 534 </td>\n   <td style=\"text-align:right;\"> 50595 </td>\n   <td style=\"text-align:right;\"> 288108 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Australia </td>\n   <td style=\"text-align:right;background-color: yellow !important;\"> 12691234 </td>\n   <td style=\"text-align:right;\"> 36686 </td>\n   <td style=\"text-align:right;\"> 3278260 </td>\n   <td style=\"text-align:right;\"> 16006180 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\ndataframe3 <- select(dataframe, \"State/Territory\", \"Response Clear Yes\", \"Response Clear Yes %\", \"Response Clear No\", \"Response Clear No %\")\ncolnames(dataframe3) <- c(\"State/Territory\", \"Yes\", \"Yes %\", \"No\", \"No %\")\nprint(dataframe3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n  `State/Territory`                   Yes `Yes %`      No `No %`\n  <chr>                             <dbl>   <dbl>   <dbl>  <dbl>\n1 New South Wales                 2374362    57.8 1736838   42.2\n2 Victoria                        2145629    64.9 1161098   35.1\n3 Queensland                      1487060    60.7  961015   39.3\n4 South Australia                  592528    62.5  356247   37.5\n5 Western Australia                801575    63.7  455924   36.3\n6 Tasmania                         191948    63.6  109655   36.4\n7 Northern Territory(b)             48686    60.6   31690   39.4\n8 Australian Capital Territory(c)  175459    74     61520   26  \n9 Australia                       7817247    61.6 4873987   38.4\n```\n:::\n\n```{.r .cell-code}\nnrow(dataframe3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nncol(dataframe3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\n## Anticipate the data\nWe are first going to pivot the data based on columns \"Yes\" and \"No\" using the pivot_longer() command. \nUsing nrow() and ncol(), we find that we have 9 rows and 5 cols in our dataframe. Using pivot_longer, we are pivoting 2 variable names into the names_to column - \"Response\". So we will end up with 9*(2) = 18 rows in the dataframe. The cols will remain the same(5 columns) because we are removing 2 cols and adding 2 cols with the \"names_to\" and \"values_to\" attributes.\n\nNext we will want to substitute \"Yes %\" and \"No %\" with a single column - \"Percentage Response Count\" for the dataframe such that column value for a particular row is equal to value in \"Yes %\" if \"Response == Yes\", otherwise value will be equal to value in \n\"No %\". Thus overall, we will lose one column and end up with 4 columns.\n\nInitial Dimensions = 9 x 5\nFinal Prediction = 18 x 4\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\nWe first use the pivot_longer() function to pivot the \"Yes\" and \"No\" columns and then apply the mutate() function to get the \"Percentage Response Count\" column. In the end, we print out the number of rows and columns to verify our prediction. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataframe4 <- dataframe3 %>% pivot_longer(cols=c(\"Yes\",\"No\"), names_to = \"Response\", values_to = \"Response Count\") %>%\n  mutate(`Percentage Response Count` = case_when(\n    Response == \"Yes\" ~ `Yes %`,\n    Response == \"No\" ~ `No %`\n  )) %>%\n  select(-\"Yes %\", -\"No %\")\n\nprint(dataframe4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 4\n   `State/Territory`               Response `Response Count` Percentage Respon…¹\n   <chr>                           <chr>               <dbl>               <dbl>\n 1 New South Wales                 Yes               2374362                57.8\n 2 New South Wales                 No                1736838                42.2\n 3 Victoria                        Yes               2145629                64.9\n 4 Victoria                        No                1161098                35.1\n 5 Queensland                      Yes               1487060                60.7\n 6 Queensland                      No                 961015                39.3\n 7 South Australia                 Yes                592528                62.5\n 8 South Australia                 No                 356247                37.5\n 9 Western Australia               Yes                801575                63.7\n10 Western Australia               No                 455924                36.3\n11 Tasmania                        Yes                191948                63.6\n12 Tasmania                        No                 109655                36.4\n13 Northern Territory(b)           Yes                 48686                60.6\n14 Northern Territory(b)           No                  31690                39.4\n15 Australian Capital Territory(c) Yes                175459                74  \n16 Australian Capital Territory(c) No                  61520                26  \n17 Australia                       Yes               7817247                61.6\n18 Australia                       No                4873987                38.4\n# … with abbreviated variable name ¹​`Percentage Response Count`\n```\n:::\n\n```{.r .cell-code}\nnrow(dataframe4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n\n```{.r .cell-code}\nncol(dataframe4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}