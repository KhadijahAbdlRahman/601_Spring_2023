{
  "hash": "798b1df3e8fd33e8e924bce9bec00ff8",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Ishan Bhardwaj\"\ndescription: \"Tidy data transformations\"\ndate: \"05/20/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - Ishan Bhardwaj\n  - eggs\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs <- read_csv(\"_data/eggs_tidy.csv\")\neggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 √ó 6\n   month      year large_half_dozen large_dozen extra_large_half_dozen\n   <chr>     <dbl>            <dbl>       <dbl>                  <dbl>\n 1 January    2004             126         230                    132 \n 2 February   2004             128.        226.                   134.\n 3 March      2004             131         225                    137 \n 4 April      2004             131         225                    137 \n 5 May        2004             131         225                    137 \n 6 June       2004             134.        231.                   137 \n 7 July       2004             134.        234.                   137 \n 8 August     2004             134.        234.                   137 \n 9 September  2004             130.        234.                   136.\n10 October    2004             128.        234.                   136.\n# ‚Ñπ 110 more rows\n# ‚Ñπ 1 more variable: extra_large_dozen <dbl>\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(select(eggs, \"year\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nyear\n2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 \n  12   12   12   12   12   12   12   12   12   12 \n```\n:::\n:::\n\n\nThis dataset provides values (most likely prices, although units are not provided) for different set quantities of eggs: large half dozen, large dozen, extra large half dozen, and extra large dozen. It records this data for every month of a specified year for the years 2004 to 2013. One issue with this dataset is that it has different columns for different dozen sizes, but these sizes are really all observances of the same variable: the dozen size.\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n\n```{.r .cell-code}\nnew_rows <- nrow(eggs) * 4\nnew_cols <- ncol(eggs) - 4 + 2\n# Expected number of rows\nnew_rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480\n```\n:::\n\n```{.r .cell-code}\n# Expected number of columns\nnew_cols\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nFrom the original dataset, we want to collapse the four dozen size columns into one, and that new column's values will be in another column that carries all the cell values from the four separate columns. Hence, we subtract four and add two to our original number of columns. This also means that there will be four times the number of observances in the dataset, since each month will have to deal with four dozen types. Hence, we multiply the number of rows by four.\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_tidy <- pivot_longer(eggs, 3:6, names_to = \"dozen_type\", values_to = \"Value\")\neggs_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 4\n   month     year dozen_type             Value\n   <chr>    <dbl> <chr>                  <dbl>\n 1 January   2004 large_half_dozen        126 \n 2 January   2004 large_dozen             230 \n 3 January   2004 extra_large_half_dozen  132 \n 4 January   2004 extra_large_dozen       230 \n 5 February  2004 large_half_dozen        128.\n 6 February  2004 large_dozen             226.\n 7 February  2004 extra_large_half_dozen  134.\n 8 February  2004 extra_large_dozen       230 \n 9 March     2004 large_half_dozen        131 \n10 March     2004 large_dozen             225 \n# ‚Ñπ 470 more rows\n```\n:::\n\n```{.r .cell-code}\ndim(eggs_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480   4\n```\n:::\n:::\n\n\nThe new pivoted data has the expected dimensions: 480 rows and 4 columns. A \"case\" in this new dataset is the value of one of four egg dozen types for a particular month in a particular year. This dataset is tidy because each case has its own row, each relevant variable its own column, and each value its own cell.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}