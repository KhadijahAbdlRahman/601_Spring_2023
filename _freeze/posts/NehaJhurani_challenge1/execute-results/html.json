{
  "hash": "76f4a3d4394a16e8e54cec6519400197",
  "result": {
    "markdown": "---\ntitle: \"Read and describe dataset\"\nauthor: \"Neha Jhurani\"\ndesription: \"Import and analysize the dataset: birds.csv, wild_bird_data.xlsx using R commands\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge1\n  - Neha Jhurani\n  - birds.csv, wild_bird_data.xlsx\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Analysing birds data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\n#reading birds csv data\nbirds_data <- read_csv(\"_data/birds.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30977 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Domain Code, Domain, Area, Element, Item, Unit, Flag, Flag Description\ndbl (6): Area Code, Element Code, Item Code, Year Code, Year, Value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n#visualizing birds data in spreadsheet style\nview(birds_data)\n\n#getting the number of rows and columns in the csv\ndim(birds_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30977    14\n```\n:::\n\n```{.r .cell-code}\n#viewing the last few rows of the birds data\ntail(birds_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Domai…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QA      Live …    5504 Poly…    5112 Stocks     1068 Ducks    2013  2013 1000…\n2 QA      Live …    5504 Poly…    5112 Stocks     1068 Ducks    2014  2014 1000…\n3 QA      Live …    5504 Poly…    5112 Stocks     1068 Ducks    2015  2015 1000…\n4 QA      Live …    5504 Poly…    5112 Stocks     1068 Ducks    2016  2016 1000…\n5 QA      Live …    5504 Poly…    5112 Stocks     1068 Ducks    2017  2017 1000…\n6 QA      Live …    5504 Poly…    5112 Stocks     1068 Ducks    2018  2018 1000…\n# … with 3 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   and abbreviated variable names ¹​`Domain Code`, ²​`Area Code`,\n#   ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\n#extracting all the column names\ncolnames(birds_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Domain Code\"      \"Domain\"           \"Area Code\"        \"Area\"            \n [5] \"Element Code\"     \"Element\"          \"Item Code\"        \"Item\"            \n [9] \"Year Code\"        \"Year\"             \"Unit\"             \"Value\"           \n[13] \"Flag\"             \"Flag Description\"\n```\n:::\n\n```{.r .cell-code}\n#selecting only the unique values of Item column\nunique(select(birds_data, c(\"Item\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n  Item                  \n  <chr>                 \n1 Chickens              \n2 Ducks                 \n3 Geese and guinea fowls\n4 Turkeys               \n5 Pigeons, other birds  \n```\n:::\n\n```{.r .cell-code}\n#filtering all the rows which has the Year as 2018\nfilter(birds_data, Year == \"2018\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 577 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2018  2018\n 2 QA           Live …       3 Alba…    5112 Stocks     1057 Chic…    2018  2018\n 3 QA           Live …       3 Alba…    5112 Stocks     1068 Ducks    2018  2018\n 4 QA           Live …       3 Alba…    5112 Stocks     1072 Gees…    2018  2018\n 5 QA           Live …       3 Alba…    5112 Stocks     1079 Turk…    2018  2018\n 6 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    2018  2018\n 7 QA           Live …       4 Alge…    5112 Stocks     1068 Ducks    2018  2018\n 8 QA           Live …       4 Alge…    5112 Stocks     1072 Gees…    2018  2018\n 9 QA           Live …       4 Alge…    5112 Stocks     1079 Turk…    2018  2018\n10 QA           Live …       5 Amer…    5112 Stocks     1057 Chic…    2018  2018\n# … with 567 more rows, 4 more variables: Unit <chr>, Value <dbl>, Flag <chr>,\n#   `Flag Description` <chr>, and abbreviated variable names ¹​`Domain Code`,\n#   ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\n#finding the mean value for each item in a specific area during a specific year\nbirds_data %>% group_by(Year,Area,Item) %>% summarise(mean(Value), .groups = 'drop')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 4\n    Year Area        Item                   `mean(Value)`\n   <dbl> <chr>       <chr>                          <dbl>\n 1  1961 Afghanistan Chickens                        4700\n 2  1961 Africa      Chickens                      274201\n 3  1961 Africa      Ducks                           6231\n 4  1961 Africa      Geese and guinea fowls          3882\n 5  1961 Africa      Pigeons, other birds            5800\n 6  1961 Africa      Turkeys                         1213\n 7  1961 Albania     Chickens                        1580\n 8  1961 Albania     Ducks                             NA\n 9  1961 Albania     Geese and guinea fowls            NA\n10  1961 Albania     Turkeys                           NA\n# … with 30,967 more rows\n```\n:::\n\n```{.r .cell-code}\n#summarizing the values in each column of birds data, It gives us (minimum, 1st quartile, median, mean, 3rd quartile, maximum, number of NA's present) for a column that has numerical values and gives (length, class, mode) for a column that has character values\nsummary(birds_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Domain Code           Domain            Area Code        Area          \n Length:30977       Length:30977       Min.   :   1   Length:30977      \n Class :character   Class :character   1st Qu.:  79   Class :character  \n Mode  :character   Mode  :character   Median : 156   Mode  :character  \n                                       Mean   :1202                     \n                                       3rd Qu.: 231                     \n                                       Max.   :5504                     \n                                                                        \n  Element Code    Element            Item Code        Item          \n Min.   :5112   Length:30977       Min.   :1057   Length:30977      \n 1st Qu.:5112   Class :character   1st Qu.:1057   Class :character  \n Median :5112   Mode  :character   Median :1068   Mode  :character  \n Mean   :5112                      Mean   :1066                     \n 3rd Qu.:5112                      3rd Qu.:1072                     \n Max.   :5112                      Max.   :1083                     \n                                                                    \n   Year Code         Year          Unit               Value         \n Min.   :1961   Min.   :1961   Length:30977       Min.   :       0  \n 1st Qu.:1976   1st Qu.:1976   Class :character   1st Qu.:     171  \n Median :1992   Median :1992   Mode  :character   Median :    1800  \n Mean   :1991   Mean   :1991                      Mean   :   99411  \n 3rd Qu.:2005   3rd Qu.:2005                      3rd Qu.:   15404  \n Max.   :2018   Max.   :2018                      Max.   :23707134  \n                                                  NA's   :1036      \n     Flag           Flag Description  \n Length:30977       Length:30977      \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\n## Analysing wild birds data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n\n#reading wild_bird_data xlsx\nwild_bird_data <- read_xlsx(\"_data/wild_bird_data.xlsx\")\n\n#visualizing wild bird data in spreadsheet style\nview(wild_bird_data)\n\n#extracting the number of rows and columns in the excel\ndim(wild_bird_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 147   2\n```\n:::\n\n```{.r .cell-code}\n#viewing the last 10 rows of wild bird data\ntail(wild_bird_data, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   Reference        `Taken from Figure 1 of Nee et al.`\n   <chr>            <chr>                              \n 1 4450.50815600577 4788.66353161336                   \n 2 4223.72945322751 433.148027881688                   \n 3 2320.09569921356 151.097182999144                   \n 4 1064.32682601983 106.902249798449                   \n 5 1137.96479906865 53.9362035620238                   \n 6 1003.03939853867 22.3522084608936                   \n 7 1042.06074444654 1758.76989729032                   \n 8 1106.07510035687 3974.59483110465                   \n 9 1368.36501582366 9797.18806953683                   \n10 2053.74863827143 20660.849081157                    \n```\n:::\n\n```{.r .cell-code}\n#extracting all the column names\ncolnames(wild_bird_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Reference\"                         \"Taken from Figure 1 of Nee et al.\"\n```\n:::\n\n```{.r .cell-code}\n#extracting a subset of wild bird data\nwild_bird_data[4:12,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  Reference        `Taken from Figure 1 of Nee et al.`\n  <chr>            <chr>                              \n1 8.63858738018464 2592996.86778979                   \n2 10.6897349302105 3524193.2266336                    \n3 7.41722577905587 389806.168891807                   \n4 9.1169347252776  604765.97978904                    \n5 8.03684333000353 192360.511579436                   \n6 8.70473119796067 250452.449623033                   \n7 8.89032317828959 16997.4156415239                   \n8 9.51590845877281 595.09393677964                    \n9 10.9430490453536 864.665387886239                   \n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}