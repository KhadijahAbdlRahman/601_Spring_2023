{
  "hash": "fdfc38ebbff02ec2bcedda4a853fb407",
  "result": {
    "markdown": "---\ntitle: \"Challenge 1\"\nauthor: \"Harsha Kanaka Eswar Gudipudi\"\ndescription: \"Reading the data to create a post\"\ndate: \"05/15/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - Harsha Kanaka Eswar Gudipudi\n  - FAOstat_livestock.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1)  read in a dataset, and\n\n2)  describe the dataset using both words and any supporting information (e.g., tables, etc)\n\n## Read in the Data\n\nRead in one (or more) of the following data sets, using the correct R package and command.\n\n-   railroad_2012_clean_county.csv ⭐\n-   birds.csv ⭐⭐\n-   FAOstat\\*.csv ⭐⭐\n-   wild_bird_data.xlsx ⭐⭐⭐\n-   StateCounty2012.xls ⭐⭐⭐⭐\n\nFind the `_data` folder, located inside the `posts` folder. Then you can read in the data, using either one of the `readr` standard tidy read commands, or a specialized package such as `readxl`.\n\n##### Reading the FAOstat_livestock.csv data and displaying a few columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv('_data/FAOstat_livestock.csv')\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  `Domain Code` Domain      `Area Code` Area  `Element Code` Element `Item Code`\n  <chr>         <chr>             <dbl> <chr>          <dbl> <chr>         <dbl>\n1 QA            Live Anima…           2 Afgh…           5111 Stocks         1107\n2 QA            Live Anima…           2 Afgh…           5111 Stocks         1107\n3 QA            Live Anima…           2 Afgh…           5111 Stocks         1107\n4 QA            Live Anima…           2 Afgh…           5111 Stocks         1107\n5 QA            Live Anima…           2 Afgh…           5111 Stocks         1107\n6 QA            Live Anima…           2 Afgh…           5111 Stocks         1107\n# ℹ 7 more variables: Item <chr>, `Year Code` <dbl>, Year <dbl>, Unit <chr>,\n#   Value <dbl>, Flag <chr>, `Flag Description` <chr>\n```\n:::\n:::\n\n\n## Describe the data\n\nUsing a combination of words and results of R commands, can you provide a high level description of the data? Describe as efficiently as possible where/how the data was (likely) gathered, indicate the cases and variables (both the interpretation and any details you deem useful to the reader to fully understand your chosen data).\n\nDescription : The \"livestock\" dataset with the columns \"Domain Code, Domain, Area Code, Area, Element Code, Element, Item Code, Item, Year Code, Year, Unit, Value, Flag, Flag Description\" is to describe livestock production and trade across various geographic areas and years.\n\nFollowing is the summary and dimension of data:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Domain Code           Domain            Area Code          Area          \n Length:82116       Length:82116       Min.   :   1.0   Length:82116      \n Class :character   Class :character   1st Qu.:  73.0   Class :character  \n Mode  :character   Mode  :character   Median : 146.0   Mode  :character  \n                                       Mean   : 912.7                     \n                                       3rd Qu.: 221.0                     \n                                       Max.   :5504.0                     \n                                                                          \n  Element Code    Element            Item Code        Item          \n Min.   :5111   Length:82116       Min.   : 866   Length:82116      \n 1st Qu.:5111   Class :character   1st Qu.: 976   Class :character  \n Median :5111   Mode  :character   Median :1034   Mode  :character  \n Mean   :5111                      Mean   :1018                     \n 3rd Qu.:5111                      3rd Qu.:1096                     \n Max.   :5111                      Max.   :1126                     \n                                                                    \n   Year Code         Year          Unit               Value          \n Min.   :1961   Min.   :1961   Length:82116       Min.   :0.000e+00  \n 1st Qu.:1976   1st Qu.:1976   Class :character   1st Qu.:1.250e+04  \n Median :1991   Median :1991   Mode  :character   Median :2.247e+05  \n Mean   :1990   Mean   :1990                      Mean   :1.163e+07  \n 3rd Qu.:2005   3rd Qu.:2005                      3rd Qu.:2.377e+06  \n Max.   :2018   Max.   :2018                      Max.   :1.490e+09  \n                                                  NA's   :1301       \n     Flag           Flag Description  \n Length:82116       Length:82116      \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 82116    14\n```\n:::\n:::\n\n\n\nAll varitey of live stocks in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_items <- unique(df$Item)\nnum_unique_items <- length(unique_items)\ncat(paste(\"There are\", num_unique_items, \"unique Varitey of animals present in the dataset\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 9 unique Varitey of animals present in the dataset\n```\n:::\n\n```{.r .cell-code}\ncat(paste(unique_items, collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAsses, Camels, Cattle, Goats, Horses, Mules, Sheep, Buffaloes, Pigs\n```\n:::\n:::\n\nThe data is collected from various areas like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_items <- unique(df$Area)\nnum_unique_items <- length(unique_items)\ncat(paste(\"Total no of areas: \", num_unique_items))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal no of areas:  253\n```\n:::\n\n```{.r .cell-code}\ncat(paste(unique_items, collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAfghanistan, Albania, Algeria, American Samoa, Angola, Antigua and Barbuda, Argentina, Armenia, Aruba, Australia, Austria, Azerbaijan, Bahamas, Bahrain, Bangladesh, Barbados, Belarus, Belgium, Belgium-Luxembourg, Belize, Benin, Bermuda, Bhutan, Bolivia (Plurinational State of), Bosnia and Herzegovina, Botswana, Brazil, British Virgin Islands, Brunei Darussalam, Bulgaria, Burkina Faso, Burundi, Cabo Verde, Cambodia, Cameroon, Canada, Cayman Islands, Central African Republic, Chad, Chile, China, Hong Kong SAR, China, mainland, China, Taiwan Province of, Colombia, Comoros, Congo, Cook Islands, Costa Rica, Côte d'Ivoire, Croatia, Cuba, Cyprus, Czechia, Czechoslovakia, Democratic People's Republic of Korea, Democratic Republic of the Congo, Denmark, Djibouti, Dominica, Dominican Republic, Ecuador, Egypt, El Salvador, Equatorial Guinea, Eritrea, Estonia, Eswatini, Ethiopia, Ethiopia PDR, Falkland Islands (Malvinas), Faroe Islands, Fiji, Finland, France, French Guyana, French Polynesia, Gabon, Gambia, Georgia, Germany, Ghana, Greece, Greenland, Grenada, Guadeloupe, Guam, Guatemala, Guinea, Guinea-Bissau, Guyana, Haiti, Honduras, Hungary, Iceland, India, Indonesia, Iran (Islamic Republic of), Iraq, Ireland, Israel, Italy, Jamaica, Japan, Jordan, Kazakhstan, Kenya, Kiribati, Kuwait, Kyrgyzstan, Lao People's Democratic Republic, Latvia, Lebanon, Lesotho, Liberia, Libya, Liechtenstein, Lithuania, Luxembourg, Madagascar, Malawi, Malaysia, Mali, Malta, Martinique, Mauritania, Mauritius, Mexico, Micronesia (Federated States of), Mongolia, Montenegro, Montserrat, Morocco, Mozambique, Myanmar, Namibia, Nauru, Nepal, Netherlands, Netherlands Antilles (former), New Caledonia, New Zealand, Nicaragua, Niger, Nigeria, Niue, Norfolk Island, North Macedonia, Norway, Oman, Pacific Islands Trust Territory, Pakistan, Palestine, Panama, Papua New Guinea, Paraguay, Peru, Philippines, Poland, Portugal, Puerto Rico, Qatar, Republic of Korea, Republic of Moldova, Réunion, Romania, Russian Federation, Rwanda, Saint Helena, Ascension and Tristan da Cunha, Saint Kitts and Nevis, Saint Lucia, Saint Pierre and Miquelon, Saint Vincent and the Grenadines, Samoa, Sao Tome and Principe, Saudi Arabia, Senegal, Serbia, Serbia and Montenegro, Seychelles, Sierra Leone, Singapore, Slovakia, Slovenia, Solomon Islands, Somalia, South Africa, South Sudan, Spain, Sri Lanka, Sudan, Sudan (former), Suriname, Sweden, Switzerland, Syrian Arab Republic, Tajikistan, Thailand, Timor-Leste, Togo, Tokelau, Tonga, Trinidad and Tobago, Tunisia, Turkey, Turkmenistan, Tuvalu, Uganda, Ukraine, United Arab Emirates, United Kingdom of Great Britain and Northern Ireland, United Republic of Tanzania, United States of America, United States Virgin Islands, Uruguay, USSR, Uzbekistan, Vanuatu, Venezuela (Bolivarian Republic of), Viet Nam, Wallis and Futuna Islands, Western Sahara, Yemen, Yugoslav SFR, Zambia, Zimbabwe, World, Africa, Eastern Africa, Middle Africa, Northern Africa, Southern Africa, Western Africa, Americas, Northern America, Central America, Caribbean, South America, Asia, Central Asia, Eastern Asia, Southern Asia, South-eastern Asia, Western Asia, Europe, Eastern Europe, Northern Europe, Southern Europe, Western Europe, Oceania, Australia and New Zealand, Melanesia, Micronesia, Polynesia\n```\n:::\n:::\n\n \nHere are the no of datapoints present from year 1961-1965:\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_filter <- df$Year %in% c(\"1961\", \"1962\", \"1963\", \"1964\", \"1965\")\nfiltered_data <- df[year_filter,]\nyear_counts <- table(filtered_data$Year)\nbarplot(year_counts, xlab = \"Year\", ylab = \"Number of data points\", \n        ylim = c(0, 2000))\n```\n\n::: {.cell-output-display}\n![](HarshaKanakaEswarGudipudi_challenge1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::",
    "supporting": [
      "HarshaKanakaEswarGudipudi_challenge1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}