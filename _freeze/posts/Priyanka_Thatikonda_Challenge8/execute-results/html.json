{
  "hash": "27277a4d43d3d947b739269851b3b090",
  "result": {
    "markdown": "---\ntitle: \"Challenge 8_PriyankaThatikonda\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Joining Data\"\ndate: \"08/25/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_8\n  - railroads\n  - snl\n  - faostat\n  - debt\neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in multiple data sets, and describe the data set using both\n    words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  join two or more data sets and analyze some aspect of the joined\n    data\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R\npackage and command.\n\n-   military marriages ⭐⭐\n-   faostat ⭐⭐\n-   railroads ⭐⭐⭐\n-   fed_rate ⭐⭐⭐\n-   debt ⭐⭐⭐\n-   us_hh ⭐⭐⭐⭐\n-   snl ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactors <- read_csv(\"_data/snl_actors.csv\")\ncasts <- read_csv(\"_data/snl_casts.csv\")\nseasons <- read_csv(\"_data/snl_seasons.csv\")\nhead(actors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  aid            url           type  gender \n  <chr>          <chr>         <chr> <chr>  \n1 Kate McKinnon  /Cast/?KaMc   cast  female \n2 Alex Moffat    /Cast/?AlMo   cast  male   \n3 Ego Nwodim     /Cast/?EgNw   cast  unknown\n4 Chris Redd     /Cast/?ChRe   cast  male   \n5 Kenan Thompson /Cast/?KeTh   cast  male   \n6 Carey Mulligan /Guests/?3677 guest andy   \n```\n:::\n\n```{.r .cell-code}\ncolnames(actors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aid\"    \"url\"    \"type\"   \"gender\"\n```\n:::\n\n```{.r .cell-code}\nhead(casts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  aid                sid featured first_epid last_epid update_…¹ n_epi…² seaso…³\n  <chr>            <dbl> <lgl>         <dbl>     <dbl> <lgl>       <dbl>   <dbl>\n1 A. Whitney Brown    11 TRUE       19860222        NA FALSE           8   0.444\n2 A. Whitney Brown    12 TRUE             NA        NA FALSE          20   1    \n3 A. Whitney Brown    13 TRUE             NA        NA FALSE          13   1    \n4 A. Whitney Brown    14 TRUE             NA        NA FALSE          20   1    \n5 A. Whitney Brown    15 TRUE             NA        NA FALSE          20   1    \n6 A. Whitney Brown    16 TRUE             NA        NA FALSE          20   1    \n# … with abbreviated variable names ¹​update_anchor, ²​n_episodes,\n#   ³​season_fraction\n```\n:::\n\n```{.r .cell-code}\ncolnames(casts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aid\"             \"sid\"             \"featured\"        \"first_epid\"     \n[5] \"last_epid\"       \"update_anchor\"   \"n_episodes\"      \"season_fraction\"\n```\n:::\n\n```{.r .cell-code}\nhead(seasons)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n    sid  year first_epid last_epid n_episodes\n  <dbl> <dbl>      <dbl>     <dbl>      <dbl>\n1     1  1975   19751011  19760731         24\n2     2  1976   19760918  19770521         22\n3     3  1977   19770924  19780520         20\n4     4  1978   19781007  19790526         20\n5     5  1979   19791013  19800524         20\n6     6  1980   19801115  19810411         13\n```\n:::\n\n```{.r .cell-code}\ncolnames(seasons)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sid\"        \"year\"       \"first_epid\" \"last_epid\"  \"n_episodes\"\n```\n:::\n\n```{.r .cell-code}\ndim(actors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2306    4\n```\n:::\n\n```{.r .cell-code}\ndim(casts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 614   8\n```\n:::\n\n```{.r .cell-code}\ndim(seasons)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46  5\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe datasets provided contain comprehensive information about the\npopular television program - Saturday Night Live (SNL). The snl_casts\ndataset focuses on the casting details of actors across different\nepisodes and seasons. On the other hand, the snl_seasons dataset\nprovides specific information about each season, including episode\ncounts, air dates, and start years. Lastly, the snl_actors dataset\noffers insights into individual actors' roles and appearance types in\nSNL. The actors dataset comprises 2306 rows and 4 columns, while the\ncasts dataset consists of 614 rows and 8 columns. In contrast, the\nseasons dataset has 46 rows and 5 columns, offering a concise overview\nof each season's key details.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to\nanticipate your end result to provide a sanity check, and document your\nwork here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#check for any missing data in the datasets\n\nsum(is.na(actors))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(casts))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1161\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(seasons))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nseasons <- mutate(seasons,first_epid = as.Date(as.character(first_epid),format=\"%Y%m%d\"), last_epid = as.Date(as.character(last_epid), format = \"%Y%m%d\"))\ntable(seasons$first_epid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1975-10-11 1976-09-18 1977-09-24 1978-10-07 1979-10-13 1980-11-15 1981-10-03 \n         1          1          1          1          1          1          1 \n1982-09-25 1983-10-08 1984-10-06 1985-11-09 1986-10-11 1987-10-17 1988-10-08 \n         1          1          1          1          1          1          1 \n1989-09-30 1990-09-29 1991-09-28 1992-09-26 1993-09-25 1994-09-24 1995-09-30 \n         1          1          1          1          1          1          1 \n1996-09-28 1997-09-27 1998-09-26 1999-10-02 2000-10-07 2001-09-29 2002-10-05 \n         1          1          1          1          1          1          1 \n2003-10-04 2004-10-02 2005-10-01 2006-09-30 2007-09-29 2008-09-13 2009-09-26 \n         1          1          1          1          1          1          1 \n2010-09-25 2011-09-24 2012-09-15 2013-09-28 2014-09-27 2015-10-03 2016-10-01 \n         1          1          1          1          1          1          1 \n2017-09-30 2018-09-29 2019-09-28 2020-10-03 \n         1          1          1          1 \n```\n:::\n\n```{.r .cell-code}\ncasts <- mutate(casts,first_epid = as.Date(as.character(first_epid),format=\"%Y%m%d\"), last_epid = as.Date(as.character(last_epid), format = \"%Y%m%d\"))\ntable(casts$first_epid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1977-01-15 1979-10-13 1979-11-17 1979-12-15 1980-01-26 1980-04-09 1980-12-13 \n         1          1          2          1          3          2          3 \n1980-12-20 1981-04-11 1986-02-22 1986-03-22 1989-01-21 1989-03-25 1990-10-27 \n         1          5          1          1          1          1          1 \n1990-11-10 1991-02-09 1991-11-16 1993-10-02 1993-10-09 1994-03-12 1995-01-14 \n         2          2          2          1          2          1          1 \n1995-02-25 1995-04-08 1996-03-16 1999-10-23 2000-05-06 2002-03-02 2005-05-07 \n         1          1          1          1          1          1          1 \n2005-11-12 2008-02-23 2008-11-15 2012-04-07 2014-01-18 2014-03-01 2014-10-25 \n         1          1          2          1          1          1          1 \n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your\nanalysis stream? For example, do you need to calculate new values in\norder to graph them? Can string values be represented numerically? Do\nyou need to turn any variables into factors and reorder for ease of\ngraphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\n## Join Data\n\nBe sure to include a sanity check, and double-check that case count is\ncorrect!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseasons_casts <- seasons %>% left_join(casts,by=\"sid\")\n#sanity check\nseasons_casts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 614 × 12\n     sid  year first_ep…¹ last_epi…² n_epi…³ aid   featu…⁴ first_ep…⁵ last_epi…⁶\n   <dbl> <dbl> <date>     <date>       <dbl> <chr> <lgl>   <date>     <date>    \n 1     1  1975 1975-10-11 1976-07-31      24 Gild… FALSE   NA         NA        \n 2     1  1975 1975-10-11 1976-07-31      24 Mich… FALSE   NA         1975-11-08\n 3     1  1975 1975-10-11 1976-07-31      24 Lara… FALSE   NA         NA        \n 4     1  1975 1975-10-11 1976-07-31      24 Garr… FALSE   NA         NA        \n 5     1  1975 1975-10-11 1976-07-31      24 Jane… FALSE   NA         NA        \n 6     1  1975 1975-10-11 1976-07-31      24 Geor… FALSE   NA         1975-10-11\n 7     1  1975 1975-10-11 1976-07-31      24 Chev… FALSE   NA         NA        \n 8     1  1975 1975-10-11 1976-07-31      24 John… FALSE   NA         NA        \n 9     1  1975 1975-10-11 1976-07-31      24 Dan … FALSE   NA         NA        \n10     2  1976 1976-09-18 1977-05-21      22 Gild… FALSE   NA         NA        \n# … with 604 more rows, 3 more variables: update_anchor <lgl>,\n#   n_episodes.y <dbl>, season_fraction <dbl>, and abbreviated variable names\n#   ¹​first_epid.x, ²​last_epid.x, ³​n_episodes.x, ⁴​featured, ⁵​first_epid.y,\n#   ⁶​last_epid.y\n```\n:::\n\n```{.r .cell-code}\ncolnames(seasons_casts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"sid\"             \"year\"            \"first_epid.x\"    \"last_epid.x\"    \n [5] \"n_episodes.x\"    \"aid\"             \"featured\"        \"first_epid.y\"   \n [9] \"last_epid.y\"     \"update_anchor\"   \"n_episodes.y\"    \"season_fraction\"\n```\n:::\n\n```{.r .cell-code}\nseasons_casts_actors <- seasons_casts %>% left_join(actors, by = \"aid\")\n\n#sanity check seasons_casts_actors\nggplot(data = seasons_casts_actors, aes(x = year, y = n_episodes.y, fill = gender)) + geom_bar(stat = \"identity\") + labs(x = \"Year\", y = \"Number of Episodes\", title = \"Number of Episodes per Season\") + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Priyanka_Thatikonda_Challenge8_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Priyanka_Thatikonda_Challenge8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}