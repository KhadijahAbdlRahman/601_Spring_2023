{
  "hash": "15b8c7fe4ecc33c487fee1b516708378",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5_PriyankaThatikonda\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Introduction to Visualization\"\ndate: \"08/22/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - railroads\n  - cereal\n  - air_bnb\n  - pathogen_cost\n  - australian_marriage\n  - public_schools\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n\n-   try to make them \"publication\" ready\n-   Explain why you choose the specific graph type\n\n5)  Create at least one bivariate visualization\n\n-   try to make them \"publication\" ready\n-   Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   cereal.csv ⭐\n-   Total_cost_for_top_15_pathogens_2018.xlsx ⭐\n-   Australian Marriage ⭐⭐\n-   AB_NYC_2019.csv ⭐⭐⭐\n-   StateCounty2012.xls ⭐⭐⭐\n-   Public School Characteristics ⭐⭐⭐⭐\n-   USA Households ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"_data/cereal.csv\")\ndim(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20  4\n```\n:::\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  Cereal              Sodium Sugar Type \n  <chr>                <dbl> <dbl> <chr>\n1 Frosted Mini Wheats      0    11 A    \n2 Raisin Bran            340    18 A    \n3 All Bran                70     5 A    \n4 Apple Jacks            140    14 C    \n5 Captain Crunch         200    12 C    \n6 Cheerios               180     1 C    \n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe selected dataset (\"cereal.csv\") has 20 observations and 5 variables which contains the name of the cereal, amount of sodium and sugar it contains per serving, a variable that denotes the type of cereal along with a numerical variable that talks about the type of cereal's health rating. It is a tabular data with each row denoting a different cereal and each column representing information about the cereal. The dataset also provides information on various types of cereals such as the popular brands such as Frosted Flakes, Cheerios etc and can be used to make analysis about the nutritional content of breakfast cereals and compare different types of cereals based on their sugar and sodium content.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nData already looks tired, just checking for missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for missing values in the entire dataframe\nany_missing <- any(is.na(data))\nprint(any_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Check for missing values in each column\ncolumn_missing <- colSums(is.na(data)) > 0\nprint(column_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCereal Sodium  Sugar   Type \n FALSE  FALSE  FALSE  FALSE \n```\n:::\n\n```{.r .cell-code}\n# Check for missing values in each row\nrow_missing <- rowSums(is.na(data)) > 0\nprint(row_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n#Check for missing values\nsum(is.na(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>%\n  mutate(sugar_per_cup = Sugar * 0.75,  \n         sodium_per_cup = Sodium * 0.75)  \ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 6\n   Cereal                Sodium Sugar Type  sugar_per_cup sodium_per_cup\n   <chr>                  <dbl> <dbl> <chr>         <dbl>          <dbl>\n 1 Frosted Mini Wheats        0    11 A              8.25            0  \n 2 Raisin Bran              340    18 A             13.5           255  \n 3 All Bran                  70     5 A              3.75           52.5\n 4 Apple Jacks              140    14 C             10.5           105  \n 5 Captain Crunch           200    12 C              9             150  \n 6 Cheerios                 180     1 C              0.75          135  \n 7 Cinnamon Toast Crunch    210    10 C              7.5           158. \n 8 Crackling Oat Bran       150    16 A             12             112. \n 9 Fiber One                100     0 A              0              75  \n10 Frosted Flakes           130    12 C              9              97.5\n11 Froot Loops              140    14 C             10.5           105  \n12 Honey Bunches of Oats    180     7 A              5.25          135  \n13 Honey Nut Cheerios       190     9 C              6.75          142. \n14 Life                     160     6 C              4.5           120  \n15 Rice Krispies            290     3 C              2.25          218. \n16 Honey Smacks              50    15 A             11.2            37.5\n17 Special K                220     4 A              3             165  \n18 Wheaties                 180     4 A              3             135  \n19 Corn Flakes              200     3 A              2.25          150  \n20 Honeycomb                210    11 C              8.25          158. \n```\n:::\n:::\n\n\n## Univariate Visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = \"\", y = Sodium)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot showing the sodium quantity present in Breakfast Cereals\",\n       y = \"Sodium (mg)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Priyanka_Thatikonda_Challenge5_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data, aes(x = Sugar)) +\n  geom_histogram(binwidth = 2, fill = \"dodgerblue\", color = \"white\") +\n  labs(title = \"Histogram showing the sugar quantity in Breakfast Cereals\", x = \"Sugar (g)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Priyanka_Thatikonda_Challenge5_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\nBox Plot showing the sodium quantity present in Breakfast Cereals - Using a box plot for sodium in this dataset can help us understand the levels of sodium in the cereals. The box plot can be interpreted as follows - the vertical axis represents the sodium values, the horizontal axis denotes the cereal variable. The box plot summarizes the sodium variable's distribution, showing the IQR (interquartile range) with the box edges representing the 25th and 75th percentiles. The whiskers represent the data range, and any outliers are shown as individual points outside the whiskers. The median is depicted by the line inside the box. The box plot helps easily identify the sodium content in cereals and provides insights into sodium content variability and distribution across different cereal types.\n\nHistogram showing the sugar quantity in Breakfast Cereals - The histogram provides a quick overview of the distribution of the sugar content in cereals. The histogram helps us identify the most common sugar content range and any outliers or unusual data patterns. The histogram's shape can reveal the skewness or symmetry of the sugar content distribution, making it a valuable tool for examining the frequency and distribution of sugar content in breakfast cereals.\n\n## Bivariate Visualization(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  arrange(Sugar) %>%\n  ggplot(aes(x = Cereal, y = Sugar)) +\n  geom_segment(aes(xend = Cereal, yend = 0)) +\n  geom_point(color = 'blue', fill = 'black', shape = 20, size = 4) +\n  coord_flip(expand = TRUE) +\n  labs(title = \"Content of Sugar in Cereal\", y = \"Sugar Quantity\", x = \"Cereal\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Priyanka_Thatikonda_Challenge5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe above bivariate graph shows the relationship between Sugar and Cereal. On close observation we see how Crackling Oat and Raising Bran have the highest sugar content and Cheerios and fiber one have the lowest sugar levels. From this it helps the user realise how crackling oats and raising bran should be consumes less.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = data)+ geom_point(mapping = aes(x = Sodium, y = Sugar,col=Type)) + ggtitle(\"SugarvsSodium Content in Cereals\")\n```\n\n::: {.cell-output-display}\n![](Priyanka_Thatikonda_Challenge5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nA scatter plot of sugar and sodium per cup in breakfast cereals is a useful visualization tool that can provide insights into the relationship between these two nutrient components in the cereal dataset. It can reveal patterns, correlations, and outliers, helping to determine the strength and direction of the relationship between sugar and sodium content in cereals.\n\nAny additional comments?\n",
    "supporting": [
      "Priyanka_Thatikonda_Challenge5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}