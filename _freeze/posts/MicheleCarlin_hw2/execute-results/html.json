{
  "hash": "805734a3200bd4414d6697aeea3db60e",
  "result": {
    "markdown": "---\ntitle: \"Global Hotel Bookings: 2015-2017\"\nauthor: \"Michele Carlin\"\ndesription: \"Exploring, data wrangling, and summarizing hotel bookings data\"\ndate: \"02/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_2\n  - Michele Carlin\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\ninstall.packages(summarytools)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in install.packages(summarytools): object 'summarytools' not found\n```\n:::\n\n```{.r .cell-code}\nlibrary(summarytools)\ninstall.packages(dplyr)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in install.packages(dplyr): object 'dplyr' not found\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n## Read in and view 'hotel bookings' dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nhotel_bookings <- read_csv (\"_data/hotel_bookings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nView(hotel_bookings)\n```\n:::\n\n## List of variables in dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [119,390 × 32] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ hotel                         : chr [1:119390] \"Resort Hotel\" \"Resort Hotel\" \"Resort Hotel\" \"Resort Hotel\" ...\n $ is_canceled                   : num [1:119390] 0 0 0 0 0 0 0 0 1 1 ...\n $ lead_time                     : num [1:119390] 342 737 7 13 14 14 0 9 85 75 ...\n $ arrival_date_year             : num [1:119390] 2015 2015 2015 2015 2015 ...\n $ arrival_date_month            : chr [1:119390] \"July\" \"July\" \"July\" \"July\" ...\n $ arrival_date_week_number      : num [1:119390] 27 27 27 27 27 27 27 27 27 27 ...\n $ arrival_date_day_of_month     : num [1:119390] 1 1 1 1 1 1 1 1 1 1 ...\n $ stays_in_weekend_nights       : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ stays_in_week_nights          : num [1:119390] 0 0 1 1 2 2 2 2 3 3 ...\n $ adults                        : num [1:119390] 2 2 1 1 2 2 2 2 2 2 ...\n $ children                      : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ babies                        : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ meal                          : chr [1:119390] \"BB\" \"BB\" \"BB\" \"BB\" ...\n $ country                       : chr [1:119390] \"PRT\" \"PRT\" \"GBR\" \"GBR\" ...\n $ market_segment                : chr [1:119390] \"Direct\" \"Direct\" \"Direct\" \"Corporate\" ...\n $ distribution_channel          : chr [1:119390] \"Direct\" \"Direct\" \"Direct\" \"Corporate\" ...\n $ is_repeated_guest             : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ previous_cancellations        : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ previous_bookings_not_canceled: num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ reserved_room_type            : chr [1:119390] \"C\" \"C\" \"A\" \"A\" ...\n $ assigned_room_type            : chr [1:119390] \"C\" \"C\" \"C\" \"A\" ...\n $ booking_changes               : num [1:119390] 3 4 0 0 0 0 0 0 0 0 ...\n $ deposit_type                  : chr [1:119390] \"No Deposit\" \"No Deposit\" \"No Deposit\" \"No Deposit\" ...\n $ agent                         : chr [1:119390] \"NULL\" \"NULL\" \"NULL\" \"304\" ...\n $ company                       : chr [1:119390] \"NULL\" \"NULL\" \"NULL\" \"NULL\" ...\n $ days_in_waiting_list          : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ customer_type                 : chr [1:119390] \"Transient\" \"Transient\" \"Transient\" \"Transient\" ...\n $ adr                           : num [1:119390] 0 0 75 75 98 ...\n $ required_car_parking_spaces   : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ total_of_special_requests     : num [1:119390] 0 0 0 0 1 1 0 1 1 0 ...\n $ reservation_status            : chr [1:119390] \"Check-Out\" \"Check-Out\" \"Check-Out\" \"Check-Out\" ...\n $ reservation_status_date       : Date[1:119390], format: \"2015-07-01\" \"2015-07-01\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   hotel = col_character(),\n  ..   is_canceled = col_double(),\n  ..   lead_time = col_double(),\n  ..   arrival_date_year = col_double(),\n  ..   arrival_date_month = col_character(),\n  ..   arrival_date_week_number = col_double(),\n  ..   arrival_date_day_of_month = col_double(),\n  ..   stays_in_weekend_nights = col_double(),\n  ..   stays_in_week_nights = col_double(),\n  ..   adults = col_double(),\n  ..   children = col_double(),\n  ..   babies = col_double(),\n  ..   meal = col_character(),\n  ..   country = col_character(),\n  ..   market_segment = col_character(),\n  ..   distribution_channel = col_character(),\n  ..   is_repeated_guest = col_double(),\n  ..   previous_cancellations = col_double(),\n  ..   previous_bookings_not_canceled = col_double(),\n  ..   reserved_room_type = col_character(),\n  ..   assigned_room_type = col_character(),\n  ..   booking_changes = col_double(),\n  ..   deposit_type = col_character(),\n  ..   agent = col_character(),\n  ..   company = col_character(),\n  ..   days_in_waiting_list = col_double(),\n  ..   customer_type = col_character(),\n  ..   adr = col_double(),\n  ..   required_car_parking_spaces = col_double(),\n  ..   total_of_special_requests = col_double(),\n  ..   reservation_status = col_character(),\n  ..   reservation_status_date = col_date(format = \"\")\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n## dfSummary\n\n::: {.cell}\n\n```{.r .cell-code}\nview(dfSummary(hotel_bookings))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpszR3TJ\\file41c471ac4ea0.html\n```\n:::\n:::\n\n## Describing dataset\n## The 'hotel_bookings' dataset contains 119,390 rows and 32 columns.  Each observation is that of a single hotel booking between 2015 and 2017 and provides information on type of resort, arrival date, number of nights/people, room type, country, market segment, etc.\n\n#Create new variable for total number of guests.\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings <- hotel_bookings %>%\n    mutate (guests = adults + children + babies)\nselect(hotel_bookings, \"adults\", \"children\", \"babies\", \"guests\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 4\n   adults children babies guests\n    <dbl>    <dbl>  <dbl>  <dbl>\n 1      2        0      0      2\n 2      2        0      0      2\n 3      1        0      0      1\n 4      1        0      0      1\n 5      2        0      0      2\n 6      2        0      0      2\n 7      2        0      0      2\n 8      2        0      0      2\n 9      2        0      0      2\n10      2        0      0      2\n# … with 119,380 more rows\n```\n:::\n:::\n\n## Create a new 'season' variable using 'case_when'.\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings <- hotel_bookings %>%\n  mutate(season = case_when(\n         arrival_date_month == \"December\" | arrival_date_month == \"January\" | arrival_date_month == \"February\" ~ \"Winter\",\n        arrival_date_month == \"March\" | arrival_date_month == \"April\" | arrival_date_month == \"May\" ~ \"Spring\",\n        arrival_date_month == \"June\" | arrival_date_month == \"July\" | arrival_date_month == \"August\" ~ \"Summer\",\n       arrival_date_month == \"September\" | arrival_date_month == \"October\" | arrival_date_month == \"November\" ~ \"Fall\")\n  )\ntable(select(hotel_bookings, season))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nseason\n  Fall Spring Summer Winter \n 28462  32674  37477  20777 \n```\n:::\n:::\n\n## Create crosstabs of Total number of guests by Season. Summer bookings tend to have higher guest totals possibly because families travel  more when kids are on summer break.\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ guests + season, hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      season\nguests  Fall Spring Summer Winter\n    0     44     48     43     45\n    1   6438   6563   4279   5301\n    2  20043  22794  25999  13212\n    3   1395   2364   5112   1623\n    4    517    880   1970    562\n    5     10     25     69     33\n    6      1      0      0      0\n    10     2      0      0      0\n    12     0      0      1      1\n    20     2      0      0      0\n    26     5      0      0      0\n    27     2      0      0      0\n    40     1      0      0      0\n    50     1      0      0      0\n    55     1      0      0      0\n```\n:::\n:::\n\n\n## Calculate min/max/mean average daily rate (adr) and group data by hotel type and arrival month.\n\n::: {.cell}\n\n```{.r .cell-code}\nGrpByHotelType <- hotel_bookings %>%\n\tgroup_by(hotel, arrival_date_month) %>%\n\tsummarise(minADR = min(adr), maxADR = max(adr), meanADR = mean(adr)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hotel'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\ntail(GrpByHotelType)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   hotel [1]\n  hotel        arrival_date_month minADR maxADR meanADR\n  <chr>        <chr>               <dbl>  <dbl>   <dbl>\n1 Resort Hotel June                 0      319.   110. \n2 Resort Hotel March               -6.38   194.    57.5\n3 Resort Hotel May                  0      226.    78.8\n4 Resort Hotel November             0      175     48.3\n5 Resort Hotel October              0      246.    62.1\n6 Resort Hotel September            0      308.    93.3\n```\n:::\n:::\n\n\n## Graph adr by type of hotel and arrival month.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hotel_bookings, aes(fill=hotel, x=arrival_date_month, y=adr)) + \n  geom_bar(position=\"dodge\", stat=\"identity\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Sort data to find outlier(s). \n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings %>%\n  arrange(desc(adr)) %>%\n  select(hotel, adr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n   hotel          adr\n   <chr>        <dbl>\n 1 City Hotel   5400 \n 2 City Hotel    510 \n 3 Resort Hotel  508 \n 4 City Hotel    452.\n 5 Resort Hotel  450 \n 6 Resort Hotel  437 \n 7 Resort Hotel  426.\n 8 Resort Hotel  402 \n 9 Resort Hotel  397.\n10 Resort Hotel  392 \n# … with 119,380 more rows\n```\n:::\n:::\n\n## One hotel had an average daily rate of -6.4 and another of 5400 (the next highest adr is 510).Re-run bar chart with these two outliers excluded, summarize by season instead of month, and add title/axis labels.\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings %>%\n  filter(adr > 0 & adr < 600) %>%\n  ggplot(aes(fill=hotel, x=season, y=adr)) + \n  geom_bar(position=\"dodge\", stat=\"identity\") +\n   labs(title = \"Hotel Average Daily Rate by Type of Hotel and Season\", y = \"Avg Daily Rate\", x = \"Season\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n## Graph adr by market segment and type of hotel.\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings %>%\n  filter(adr > 0 & adr < 600) %>%\n  ggplot(aes(fill=hotel, x=market_segment, y=adr)) + \n  geom_bar(position=\"dodge\", stat=\"identity\") +\n     labs(title = \"Hotel Average Daily Rate by Type of Hotel and Market Segment\", y = \"Avg Daily Rate\", x = \"Market Segment\") +\n  scale_x_discrete(guide = guide_axis(n.dodge=2))\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n## Aviation and Undefined don't appear to have any Resort Hotel data. Run crosstabs to verify.\n\n## How do I leave empty space for teal column instead of red taking over width of both columns?\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ market_segment + hotel, hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               hotel\nmarket_segment  City Hotel Resort Hotel\n  Aviation             237            0\n  Complementary        542          201\n  Corporate           2986         2309\n  Direct              6093         6513\n  Groups             13975         5836\n  Offline TA/TO      16747         7472\n  Online TA          38748        17729\n  Undefined              2            0\n```\n:::\n:::\n",
    "supporting": [
      "MicheleCarlin_hw2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}