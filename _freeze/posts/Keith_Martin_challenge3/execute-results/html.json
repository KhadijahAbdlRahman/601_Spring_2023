{
  "hash": "876304f4d3815cd23902b00ea901c2b6",
  "result": {
    "markdown": "---\ntitle: \"Keith Martin Challenge 3\"\nauthor: \"Keith Martin\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"3/17/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - eggs\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(googlesheets4)\nlibrary(readxl)\n\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nIn this challenge, I decided to use the excel version of the Organice Poultry Data. Before I could read into the data, I needed to include libraries that allowed me to read in excel files.\n\n## Read in data\n\nAfter reading in the data, I noticed that there we're three different tabs within the excel file. I decided to use only the data tab as this was the first excel file I have read into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Loading in the libraries of the excel files\nexcel_sheets(\"_data/organiceggpoultry.xls\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Data\"                            \"Organic egg prices, 2004-13\"    \n[3] \"Organic poultry prices, 2004-13\"\n```\n:::\n:::\n\n\nI decided to re-name the names of the columns so they we're more easily identified. This will become helpful later when I pivot the data longer. Additionally, there is a row that needed to be removed from the data that split the egg prices and the chicken prices. By re-naming the cells it is easier to analyze the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_poulty<-read_excel(\"_data/organiceggpoultry.xls\", \n                         sheet = \"Data\",\n                          range =cell_limits(c(6,2),c(NA,12)),\n                          col_names = c(\"date\", \"XL_Dozen\", \"XL_1/2_Doz.\", \"L_Dozen\", \"L_1/2_Doz\", \"Remove\", \"Ckn_Whole\", \"Ckn_BS_Breast\", \"Ckn_Bone_Breast\", \"Ckn_Whole_legs\", \"Ckn_Thighs\"),\n                      \n                                        \n                        )\nraw_poulty %>%\n  select(-c(Remove))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 10\n   date  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶ Ckn_W…⁷ Ckn_T…⁸\n   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl> <chr>  \n 1 Jan …    230     132     230     126     198.    646. too few    194. too few\n 2 Febr…    230     134.    226.    128.    198.    642. too few    194. 203    \n 3 March    230     137     225     131     209     642. too few    194. 203    \n 4 April    234.    137     225     131     212     642. too few    194. 203    \n 5 May      236     137     225     131     214.    642. too few    194. 203    \n 6 June     241     137     231.    134.    216.    641  too few    202. 200.375\n 7 July     241     137     234.    134.    217     642. 390.5      204. 199.5  \n 8 Augu…    241     137     234.    134.    217     642. 390.5      204. 199.5  \n 9 Sept…    241     136.    234.    130.    217     642. 390.5      204. 199.5  \n10 Octo…    241     136.    234.    128.    217     642. 390.5      204. 199.5  \n# … with 110 more rows, and abbreviated variable names ¹​XL_Dozen,\n#   ²​`XL_1/2_Doz.`, ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast,\n#   ⁷​Ckn_Whole_legs, ⁸​Ckn_Thighs\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Display the months for cleaning purposes\nraw_poulty %>%\n  count(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 2\n   date            n\n   <chr>       <int>\n 1 April          10\n 2 August         10\n 3 December       10\n 4 February        8\n 5 February /1     2\n 6 Jan 2004        1\n 7 Jan 2005        1\n 8 Jan 2006        1\n 9 Jan 2007        1\n10 Jan 2008        1\n# … with 12 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### remove that /1 from the February date\nraw_poulty_clean <-raw_poulty %>% \n  mutate(date = str_remove(date, \" /1\"))\n### Separate the month and the year, fill the years in for the rest of the months\nraw_poulty_clean<-raw_poulty_clean %>%\n  separate(date, into=c(\"month\", \"year\"), sep =\" \")%>%\n  fill(year)\nraw_poulty_clean       \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 12\n   month    year  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Remove Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶\n   <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>    <dbl>   <dbl> <chr>  \n 1 Jan      2004     230     132     230     126  NA        198.    646. too few\n 2 February 2004     230     134.    226.    128. NA        198.    642. too few\n 3 March    2004     230     137     225     131  NA        209     642. too few\n 4 April    2004     234.    137     225     131  NA        212     642. too few\n 5 May      2004     236     137     225     131  NA        214.    642. too few\n 6 June     2004     241     137     231.    134. NA        216.    641  too few\n 7 July     2004     241     137     234.    134. NA        217     642. 390.5  \n 8 August   2004     241     137     234.    134. NA        217     642. 390.5  \n 9 Septemb… 2004     241     136.    234.    130. NA        217     642. 390.5  \n10 October  2004     241     136.    234.    128. NA        217     642. 390.5  \n# … with 110 more rows, 2 more variables: Ckn_Whole_legs <dbl>,\n#   Ckn_Thighs <chr>, and abbreviated variable names ¹​XL_Dozen, ²​`XL_1/2_Doz.`,\n#   ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast\n```\n:::\n:::\n\n\nThis data did not include the year for each month entry. There was also a mistake in the data that needed to be removed. \n\n\nAdditionally, the Chicken Bone Breast and the Chicken Thighs data containted characters rather than numbers. First, I had to change those words to 0. Then, I had to change them to a numerical number, rather than just a character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nckn_edited<- raw_poulty_clean %>%\n  mutate(Ckn_Bone_Breast = recode(Ckn_Bone_Breast, `too few` = \"0\"),\n      Ckn_Thighs = recode(Ckn_Thighs, `too few`=\"0\"))\nckn_edited\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 12\n   month    year  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Remove Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶\n   <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>    <dbl>   <dbl> <chr>  \n 1 Jan      2004     230     132     230     126  NA        198.    646. 0      \n 2 February 2004     230     134.    226.    128. NA        198.    642. 0      \n 3 March    2004     230     137     225     131  NA        209     642. 0      \n 4 April    2004     234.    137     225     131  NA        212     642. 0      \n 5 May      2004     236     137     225     131  NA        214.    642. 0      \n 6 June     2004     241     137     231.    134. NA        216.    641  0      \n 7 July     2004     241     137     234.    134. NA        217     642. 390.5  \n 8 August   2004     241     137     234.    134. NA        217     642. 390.5  \n 9 Septemb… 2004     241     136.    234.    130. NA        217     642. 390.5  \n10 October  2004     241     136.    234.    128. NA        217     642. 390.5  \n# … with 110 more rows, 2 more variables: Ckn_Whole_legs <dbl>,\n#   Ckn_Thighs <chr>, and abbreviated variable names ¹​XL_Dozen, ²​`XL_1/2_Doz.`,\n#   ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nckn_edited$Ckn_Bone_Breast<-as.numeric(ckn_edited$Ckn_Bone_Breast)\nckn_edited$Ckn_Thighs<-as.numeric(ckn_edited$Ckn_Thighs)\nckn_edited\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 12\n   month    year  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Remove Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶\n   <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>    <dbl>   <dbl>   <dbl>\n 1 Jan      2004     230     132     230     126  NA        198.    646.      0 \n 2 February 2004     230     134.    226.    128. NA        198.    642.      0 \n 3 March    2004     230     137     225     131  NA        209     642.      0 \n 4 April    2004     234.    137     225     131  NA        212     642.      0 \n 5 May      2004     236     137     225     131  NA        214.    642.      0 \n 6 June     2004     241     137     231.    134. NA        216.    641       0 \n 7 July     2004     241     137     234.    134. NA        217     642.    390.\n 8 August   2004     241     137     234.    134. NA        217     642.    390.\n 9 Septemb… 2004     241     136.    234.    130. NA        217     642.    390.\n10 October  2004     241     136.    234.    128. NA        217     642.    390.\n# … with 110 more rows, 2 more variables: Ckn_Whole_legs <dbl>,\n#   Ckn_Thighs <dbl>, and abbreviated variable names ¹​XL_Dozen, ²​`XL_1/2_Doz.`,\n#   ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast\n```\n:::\n:::\n\n\nThe original clean data had 12 columns and 120 rows.\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(ckn_edited)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\nnrow(ckn_edited)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nI pivoted the data to make the type of item (egg, or chicken meat) show in one column rather than have each one in their own columns. This makes it much easier to analyse the summary statistics.\n\n::: {.cell}\n\n```{.r .cell-code}\n###pivot the data to longer version for eggs data set\neggs_longer<- pivot_longer(ckn_edited,  cols=c(\"XL_Dozen\", \"XL_1/2_Doz.\", \"L_Dozen\", \"L_1/2_Doz\", \"Ckn_Whole\", \"Ckn_BS_Breast\", \"Ckn_Bone_Breast\", \"Ckn_Whole_legs\", \"Ckn_Thighs\"), \n               names_to = \"eggType/cknType\",\n               values_to = \"avgPrice\"\n  )\neggs_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,080 × 5\n   month    year  Remove `eggType/cknType` avgPrice\n   <chr>    <chr> <lgl>  <chr>                <dbl>\n 1 Jan      2004  NA     XL_Dozen              230 \n 2 Jan      2004  NA     XL_1/2_Doz.           132 \n 3 Jan      2004  NA     L_Dozen               230 \n 4 Jan      2004  NA     L_1/2_Doz             126 \n 5 Jan      2004  NA     Ckn_Whole             198.\n 6 Jan      2004  NA     Ckn_BS_Breast         646.\n 7 Jan      2004  NA     Ckn_Bone_Breast         0 \n 8 Jan      2004  NA     Ckn_Whole_legs        194.\n 9 Jan      2004  NA     Ckn_Thighs              0 \n10 February 2004  NA     XL_Dozen              230 \n# … with 1,070 more rows\n```\n:::\n:::\n\nI have included the summary statistics of price of chicken and eggs each year combined. \n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_longer%>%\n  group_by(year)%>%\n  summarise (\n      sd_year = sd (avgPrice, na.rm=TRUE),\n      max_year = max(avgPrice, na.rm = TRUE),\n      min_year = min(avgPrice, na.rm = TRUE),\n      avg_year = mean (avgPrice, na.rm = TRUE),\n      med_year = median(avgPrice, na.rm = TRUE)\n        )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n   year  sd_year max_year min_year avg_year med_year\n   <chr>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n 1 2004     162.     646.       0      241.     204.\n 2 2005     152.     646.     128.     268.     222 \n 3 2006     152.     646.     128.     269.     222 \n 4 2007     151.     646.     128.     270.     222 \n 5 2008     145.     646.     132      283.     237 \n 6 2009     140.     646.     174.     292.     248 \n 7 2010     140.     646.     174.     290.     235 \n 8 2011     139.     638.     174.     288.     235 \n 9 2012     155.     704.     173.     296.     238.\n10 2013     157.     704.     178      297.     238.\n```\n:::\n:::\n\nAdditionally, I have calculated the summary statistics of each type of item sold. However, there are some limitations of this. There are two items, chicken bone in breast and chicken Thigs that did not have data for some of the years. This threw off the aveage and standard deviations for those year, but the median remains consistent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_longer%>%\n  group_by(`eggType/cknType`)%>%\n  summarise (\n      sd_year = sd (avgPrice, na.rm=TRUE),\n      max_year = max(avgPrice, na.rm = TRUE),\n      min_year = min(avgPrice, na.rm = TRUE),\n      avg_year = mean (avgPrice, na.rm = TRUE),\n      med_year = median(avgPrice, na.rm = TRUE)\n        )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 6\n  `eggType/cknType` sd_year max_year min_year avg_year med_year\n  <chr>               <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n1 Ckn_BS_Breast       23.3      704.     638.     655.     646.\n2 Ckn_Bone_Breast     85.5      390.       0      371.     390.\n3 Ckn_Thighs          20.8      222        0      216.     222 \n4 Ckn_Whole           12.5      248      198.     231.     235 \n5 Ckn_Whole_legs       2.01     204.     194.     203.     204.\n6 L_1/2_Doz           22.6      178      126      155.     174.\n7 L_Dozen             18.5      278.     225      254.     268.\n8 XL_1/2_Doz.         24.7      188.     132      164.     186.\n9 XL_Dozen            22.8      290      230      267.     286.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_longer%>%\n  ggplot(aes(x=year, y=avgPrice, group=`eggType/cknType`, color=`eggType/cknType`)) +\n  geom_line() +\n  theme(axis.text=element_text(size=4.5)) +\n  ggtitle(\"Price Per Year\") +\n  xlab(\"Year\") + ylab(\"Price\")\n```\n\n::: {.cell-output-display}\n![](Keith_Martin_challenge3_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nI have included a color coded grab that shows a visual representation of the price per item per year. \n## Anticipate the End Result\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(eggs_longer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1080\n```\n:::\n\n```{.r .cell-code}\nncol(eggs_longer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nThe pivoted data has 5 rows and 1080 columns. \n\n",
    "supporting": [
      "Keith_Martin_challenge3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}