{
  "hash": "38c1a3c48d1695edf5200ee5c643c19e",
  "result": {
    "markdown": "---\ntitle: \"Exploring the Birds dataset\"\nauthor: \"Saksham Kumar\"\ndescription: \"Reading in data and creating a post\"\ndate: \"03/20/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - birds\n  - Saksham Kumar\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1)  read in a dataset, and\n\n2)  describe the dataset using both words and any supporting information (e.g., tables, etc)\n\n## Read in the Data\n\nRead in one (or more) of the following data sets, using the correct R package and command.\n\n-   railroad_2012_clean_county.csv ⭐\n-   birds.csv ⭐⭐\n-   FAOstat\\*.csv ⭐⭐\n-   wild_bird_data.xlsx ⭐⭐⭐\n-   StateCounty2012.xls ⭐⭐⭐⭐\n\nFind the `_data` folder, located inside the `posts` folder. Then you can read in the data, using either one of the `readr` standard tidy read commands, or a specialized package such as `readxl`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds <- read_csv('_data/birds.csv', show_col_types = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1961  1961\n 2 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1962  1962\n 3 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1963  1963\n 4 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1964  1964\n 5 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1965  1965\n 6 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1966  1966\n 7 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1967  1967\n 8 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1968  1968\n 9 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1969  1969\n10 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1970  1970\n# … with 30,967 more rows, 4 more variables: Unit <chr>, Value <dbl>,\n#   Flag <chr>, `Flag Description` <chr>, and abbreviated variable names\n#   ¹​`Domain Code`, ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n:::\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.\n\n## Describe the data\n\nUsing a combination of words and results of R commands, can you provide a high level description of the data? Describe as efficiently as possible where/how the data was (likely) gathered, indicate the cases and variables (both the interpretation and any details you deem useful to the reader to fully understand your chosen data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30977    14\n```\n:::\n:::\n\n\nThe data has 30977 rows and 14 columns (variables) \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Domain Code\"      \"Domain\"           \"Area Code\"        \"Area\"            \n [5] \"Element Code\"     \"Element\"          \"Item Code\"        \"Item\"            \n [9] \"Year Code\"        \"Year\"             \"Unit\"             \"Value\"           \n[13] \"Flag\"             \"Flag Description\"\n```\n:::\n:::\n\nThe columns (variables) in our data are listed above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  `Domain Code` = col_character(),\n  Domain = col_character(),\n  `Area Code` = col_double(),\n  Area = col_character(),\n  `Element Code` = col_double(),\n  Element = col_character(),\n  `Item Code` = col_double(),\n  Item = col_character(),\n  `Year Code` = col_double(),\n  Year = col_double(),\n  Unit = col_character(),\n  Value = col_double(),\n  Flag = col_character(),\n  `Flag Description` = col_character()\n)\n```\n:::\n:::\n\nThis helps us understand the datatype of the variables we have.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds%>%select(Item)%>%n_distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nbirds%>%select(Item)%>%unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n  Item                  \n  <chr>                 \n1 Chickens              \n2 Ducks                 \n3 Geese and guinea fowls\n4 Turkeys               \n5 Pigeons, other birds  \n```\n:::\n:::\n\n\nThe dataset contains 5 unique values in the variable 'Items'. These seem to poultry birds from a first glance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds%>%select(Area)%>%n_distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 248\n```\n:::\n\n```{.r .cell-code}\nbirds%>%select(Area)%>%unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 248 × 1\n   Area               \n   <chr>              \n 1 Afghanistan        \n 2 Albania            \n 3 Algeria            \n 4 American Samoa     \n 5 Angola             \n 6 Antigua and Barbuda\n 7 Argentina          \n 8 Armenia            \n 9 Aruba              \n10 Australia          \n# … with 238 more rows\n```\n:::\n:::\n\nThe dataset contains 248 unique values in the variable 'Area' i.e. it contains data from across 248 countries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(data = birds, aes(x = Item)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](SakshamKumar_challenge1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis graph helps us understand the distribution of birds in our dataset. As we can see, chicken is the most popular bird in our dataset.",
    "supporting": [
      "SakshamKumar_challenge1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}