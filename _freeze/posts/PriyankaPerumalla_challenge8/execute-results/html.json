{
  "hash": "02107d22b952f14fcea28df4e8e5d071",
  "result": {
    "markdown": "---\ntitle: \"Challenge 8\"\nauthor: \"Priyanka Perumalla\"\ndescription: \"Joining Data\"\ndate: \"05/15/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_8\n  - Priyanka Perumalla\n  - snl\n  \n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in multiple data sets, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  join two or more data sets and analyze some aspect of the joined data\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - military marriages ⭐⭐\n  - faostat ⭐⭐\n  - railroads  ⭐⭐⭐\n  - fed_rate ⭐⭐⭐\n  - debt ⭐⭐⭐\n  - us_hh ⭐⭐⭐⭐\n  - snl ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nsnl_actors_df <- read_csv(\"_data/snl_actors.csv\")\nsnl_casts_df <- read_csv(\"_data/snl_casts.csv\")\nsnl_seasons_df <- read_csv(\"_data/snl_seasons.csv\")\nhead(snl_actors_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  aid            url           type  gender \n  <chr>          <chr>         <chr> <chr>  \n1 Kate McKinnon  /Cast/?KaMc   cast  female \n2 Alex Moffat    /Cast/?AlMo   cast  male   \n3 Ego Nwodim     /Cast/?EgNw   cast  unknown\n4 Chris Redd     /Cast/?ChRe   cast  male   \n5 Kenan Thompson /Cast/?KeTh   cast  male   \n6 Carey Mulligan /Guests/?3677 guest andy   \n```\n:::\n\n```{.r .cell-code}\nhead(snl_casts_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  aid                sid featured first_epid last_epid update_anchor n_episodes\n  <chr>            <dbl> <lgl>         <dbl>     <dbl> <lgl>              <dbl>\n1 A. Whitney Brown    11 TRUE       19860222        NA FALSE                  8\n2 A. Whitney Brown    12 TRUE             NA        NA FALSE                 20\n3 A. Whitney Brown    13 TRUE             NA        NA FALSE                 13\n4 A. Whitney Brown    14 TRUE             NA        NA FALSE                 20\n5 A. Whitney Brown    15 TRUE             NA        NA FALSE                 20\n6 A. Whitney Brown    16 TRUE             NA        NA FALSE                 20\n# ℹ 1 more variable: season_fraction <dbl>\n```\n:::\n\n```{.r .cell-code}\nhead(snl_seasons_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n    sid  year first_epid last_epid n_episodes\n  <dbl> <dbl>      <dbl>     <dbl>      <dbl>\n1     1  1975   19751011  19760731         24\n2     2  1976   19760918  19770521         22\n3     3  1977   19770924  19780520         20\n4     4  1978   19781007  19790526         20\n5     5  1979   19791013  19800524         20\n6     6  1980   19801115  19810411         13\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Understanding the column names of the 3 data sets\ncolnames(snl_actors_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aid\"    \"url\"    \"type\"   \"gender\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(snl_casts_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aid\"             \"sid\"             \"featured\"        \"first_epid\"     \n[5] \"last_epid\"       \"update_anchor\"   \"n_episodes\"      \"season_fraction\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(snl_seasons_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sid\"        \"year\"       \"first_epid\" \"last_epid\"  \"n_episodes\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Understanding the dimensions of the dataset \ndim(snl_actors_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2306    4\n```\n:::\n\n```{.r .cell-code}\ndim(snl_casts_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 614   8\n```\n:::\n\n```{.r .cell-code}\ndim(snl_seasons_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46  5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identifying the data types of the columns\nsapply(snl_actors_df, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        aid         url        type      gender \n\"character\" \"character\" \"character\" \"character\" \n```\n:::\n\n```{.r .cell-code}\ntable(sapply(snl_actors_df, function(x) typeof(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncharacter \n        4 \n```\n:::\n\n```{.r .cell-code}\nsapply(snl_seasons_df, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       sid       year first_epid  last_epid n_episodes \n \"numeric\"  \"numeric\"  \"numeric\"  \"numeric\"  \"numeric\" \n```\n:::\n\n```{.r .cell-code}\ntable(sapply(snl_seasons_df, function(x) typeof(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ndouble \n     5 \n```\n:::\n\n```{.r .cell-code}\nsapply(snl_casts_df, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            aid             sid        featured      first_epid       last_epid \n    \"character\"       \"numeric\"       \"logical\"       \"numeric\"       \"numeric\" \n  update_anchor      n_episodes season_fraction \n      \"logical\"       \"numeric\"       \"numeric\" \n```\n:::\n\n```{.r .cell-code}\ntable(sapply(snl_casts_df, function(x) typeof(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncharacter    double   logical \n        1         5         2 \n```\n:::\n:::\n\n\n### Briefly describe the data\n\nI have picked 3 datasets for this challenge. The three data sets I have chosen are snl_actors, snl_casts, snl_seasons data sets. The snl_actors data set has the details of the actors that appeared in a role  and the type of their appearence, The snl_casts data set has information on the episodes and the seasons in which a particular actor was casted. The snl_seasons dataset has the information on every season of a series like the number of episodes, the year in which first episode was released, the year in which last episode was released etc. The First data set (snl_actors) has 2306 rows and 4 columns out of which all 4 are character type. The  Second data set(snl_casts) has 614 rows and 8 columns out of which 1 is of type character, 5 double and 2 logical data types. The third data set (snl_seasons) has 46 rows and 5 columns of which everything but one is of type numeric. Actor ID (aid) is common in first two datasets. Season ID (sid) is common in second and third datasets.\n\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\nChecking to see how many entries in the snl_actors dataset has null values.\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(snl_actors_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57\n```\n:::\n:::\n\nChecking to see how many entries in the snl_casts dataset has null values.\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(snl_casts_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1161\n```\n:::\n:::\n\n\nChecking to see how many entries in the snl_seasons dataset has null values.\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(snl_seasons_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\nWe can observe that the snl_seasons_df is very tidy. The snl_actors data set is almost tidy as 57 is a very small number. The snl_casts data set is not very tidy and hence needs cleaning. But I don't plan to clean to prevent loss of useful information.\n\nCleaning the snl_actors and snl_casts data set\n\n::: {.cell}\n\n```{.r .cell-code}\n#snl_actors_df<- na.omit(snl_actors_df)\n#snl_casts_df<- na.omit(snl_casts_df)\n```\n:::\n\n\n\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\nSince the column name type is very confusing, I have attempted to rename 'type' to 'Appearence Type'\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnl_actors_df <- snl_actors_df %>%\n  rename(\"Appearence Type\"= \"type\")\nhead(snl_actors_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  aid            url           `Appearence Type` gender \n  <chr>          <chr>         <chr>             <chr>  \n1 Kate McKinnon  /Cast/?KaMc   cast              female \n2 Alex Moffat    /Cast/?AlMo   cast              male   \n3 Ego Nwodim     /Cast/?EgNw   cast              unknown\n4 Chris Redd     /Cast/?ChRe   cast              male   \n5 Kenan Thompson /Cast/?KeTh   cast              male   \n6 Carey Mulligan /Guests/?3677 guest             andy   \n```\n:::\n:::\n\n\n## Join Data\n\nBe sure to include a sanity check, and double-check that case count is correct!\n\nI would like to join data based on actor id and season id as stated previously.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnl_seasons_casts <- snl_seasons_df %>% \n  left_join(snl_casts_df, by = \"sid\")\nsnl_seasons_casts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 614 × 12\n     sid  year first_epid.x last_epid.x n_episodes.x aid   featured first_epid.y\n   <dbl> <dbl>        <dbl>       <dbl>        <dbl> <chr> <lgl>           <dbl>\n 1     1  1975     19751011    19760731           24 Gild… FALSE              NA\n 2     1  1975     19751011    19760731           24 Mich… FALSE              NA\n 3     1  1975     19751011    19760731           24 Lara… FALSE              NA\n 4     1  1975     19751011    19760731           24 Garr… FALSE              NA\n 5     1  1975     19751011    19760731           24 Jane… FALSE              NA\n 6     1  1975     19751011    19760731           24 Geor… FALSE              NA\n 7     1  1975     19751011    19760731           24 Chev… FALSE              NA\n 8     1  1975     19751011    19760731           24 John… FALSE              NA\n 9     1  1975     19751011    19760731           24 Dan … FALSE              NA\n10     2  1976     19760918    19770521           22 Gild… FALSE              NA\n# ℹ 604 more rows\n# ℹ 4 more variables: last_epid.y <dbl>, update_anchor <lgl>,\n#   n_episodes.y <dbl>, season_fraction <dbl>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(snl_seasons_casts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"sid\"             \"year\"            \"first_epid.x\"    \"last_epid.x\"    \n [5] \"n_episodes.x\"    \"aid\"             \"featured\"        \"first_epid.y\"   \n [9] \"last_epid.y\"     \"update_anchor\"   \"n_episodes.y\"    \"season_fraction\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsnl_actors_casts_seasons <- snl_actors_df %>% \n  left_join(snl_seasons_casts, by = \"aid\")\nsnl_actors_casts_seasons\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,764 × 15\n   aid       url   `Appearence Type` gender   sid  year first_epid.x last_epid.x\n   <chr>     <chr> <chr>             <chr>  <dbl> <dbl>        <dbl>       <dbl>\n 1 Kate McK… /Cas… cast              female    37  2011     20110924    20120519\n 2 Kate McK… /Cas… cast              female    38  2012     20120915    20130518\n 3 Kate McK… /Cas… cast              female    39  2013     20130928    20140517\n 4 Kate McK… /Cas… cast              female    40  2014     20140927    20150516\n 5 Kate McK… /Cas… cast              female    41  2015     20151003    20160521\n 6 Kate McK… /Cas… cast              female    42  2016     20161001    20170520\n 7 Kate McK… /Cas… cast              female    43  2017     20170930    20180519\n 8 Kate McK… /Cas… cast              female    44  2018     20180929    20190518\n 9 Kate McK… /Cas… cast              female    45  2019     20190928    20200509\n10 Kate McK… /Cas… cast              female    46  2020     20201003    20210410\n# ℹ 2,754 more rows\n# ℹ 7 more variables: n_episodes.x <dbl>, featured <lgl>, first_epid.y <dbl>,\n#   last_epid.y <dbl>, update_anchor <lgl>, n_episodes.y <dbl>,\n#   season_fraction <dbl>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(snl_actors_casts_seasons)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"aid\"             \"url\"             \"Appearence Type\" \"gender\"         \n [5] \"sid\"             \"year\"            \"first_epid.x\"    \"last_epid.x\"    \n [9] \"n_episodes.x\"    \"featured\"        \"first_epid.y\"    \"last_epid.y\"    \n[13] \"update_anchor\"   \"n_episodes.y\"    \"season_fraction\"\n```\n:::\n:::\n\nThe above data frame is an overall combined data frame made from snl_actors, snl_casts, snl_seasons. We can use this to answer most of the analysis questions.\n\nFor example, we can use the joined data frame to observe how many seasons featured more women, more men or overall more features of any gender\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnl_actors_casts_seasons %>%\n  ggplot(aes(sid,col=gender)) +\n  geom_bar() + \n  labs(title = \"Count of featured seasons by gender\")\n```\n\n::: {.cell-output-display}\n![](PriyankaPerumalla_challenge8_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\nWe can also answer questions like\n\n::: {.cell}\n\n```{.r .cell-code}\nsnl_actors_casts_seasons %>% filter(year >= 2005) %>%filter(sid >= 5) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 242 × 15\n   aid       url   `Appearence Type` gender   sid  year first_epid.x last_epid.x\n   <chr>     <chr> <chr>             <chr>  <dbl> <dbl>        <dbl>       <dbl>\n 1 Kate McK… /Cas… cast              female    37  2011     20110924    20120519\n 2 Kate McK… /Cas… cast              female    38  2012     20120915    20130518\n 3 Kate McK… /Cas… cast              female    39  2013     20130928    20140517\n 4 Kate McK… /Cas… cast              female    40  2014     20140927    20150516\n 5 Kate McK… /Cas… cast              female    41  2015     20151003    20160521\n 6 Kate McK… /Cas… cast              female    42  2016     20161001    20170520\n 7 Kate McK… /Cas… cast              female    43  2017     20170930    20180519\n 8 Kate McK… /Cas… cast              female    44  2018     20180929    20190518\n 9 Kate McK… /Cas… cast              female    45  2019     20190928    20200509\n10 Kate McK… /Cas… cast              female    46  2020     20201003    20210410\n# ℹ 232 more rows\n# ℹ 7 more variables: n_episodes.x <dbl>, featured <lgl>, first_epid.y <dbl>,\n#   last_epid.y <dbl>, update_anchor <lgl>, n_episodes.y <dbl>,\n#   season_fraction <dbl>\n```\n:::\n:::\n",
    "supporting": [
      "PriyankaPerumalla_challenge8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}