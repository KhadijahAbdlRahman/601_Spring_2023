{
  "hash": "edf449ce7c7267460c494305031aa3b9",
  "result": {
    "markdown": "---\ntitle: \"Challenge 8\"\nauthor: \"Kekai Liu\"\ndescription: \"Joining Data\"\ndate: \"05/14/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_8\n  - military\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in multiple data sets, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  join two or more data sets and analyze some aspect of the joined data\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - military marriages ⭐⭐\n  - faostat ⭐⭐\n  - railroads  ⭐⭐⭐\n  - fed_rate ⭐⭐⭐\n  - debt ⭐⭐⭐\n  - us_hh ⭐⭐⭐⭐\n  - snl ⭐⭐⭐⭐⭐\n\nThis data contains counts of military servicemembers broken down by pay grade (E-1 to E-9, O-1 to O-10, and W-1 to W-5), marital status (single without children, single with children, joint service marriage, civilian marriage), gender (male, female), and branch (Total DoD, Air Force, Marine Corps, Navy, and Army). In this data, there are 1,414,951\ntotal servicemembers in Total DoD, 331,793 total servicemembers in Air Force, 201,843 total servicemembers in Marine Corps, 324,371 total servicemembers in Navy, and 556,944\ntotal servicemembers in Army.\n\n::: {.cell}\n\n```{.r .cell-code}\nmilitary_path <- \"_data/ActiveDuty_MaritalStatus.xls\"\n\n#extract the sheet names as a vector of strings\n#then loop through vector to read in each sheet as separate dataframe\n#rename columns:\n#suffix: male - m, female - f, total - t\n#single without children: swoc_m, swoc_f, swoc_t\n#single with children: swc_m, swc_f, swc_t\n#joint service marriage: jsm_m, jsm_f, jsm_t\n#civilian marriage: cm_m, cm_f, cm_t\n#total: tot_m, tot_f, tot_t\n#will need to do a pivot later to turn columns into single marital status column and single gender column\n\nmilitary_sheets %>%\n  purrr::map(function(sheet){\n    \n    if (sheet == \"TotalDoD\") {\n      assign(x = sheet,\n         value = readxl::read_xls(path = military_path, sheet = sheet, range=\"B9:Q37\"),\n         envir = .GlobalEnv)\n    } else if (sheet == \"AirForce\") {\n      assign(x = sheet,\n         value = readxl::read_xls(path = military_path, sheet = sheet, range=\"B9:Q31\"),\n         envir = .GlobalEnv)\n    } else if (sheet == \"MarineCorps\") {\n      assign(x = sheet,\n         value = readxl::read_xls(path = military_path, sheet = sheet, range=\"B9:Q37\"),\n         envir = .GlobalEnv)\n    } else if (sheet == \"Navy\") {\n      assign(x = sheet,\n         value = readxl::read_xls(path = military_path, sheet = sheet, range=\"B9:Q36\"),\n         envir = .GlobalEnv)\n    } else if (sheet == \"Army\") {\n      assign(x = sheet,\n         value = readxl::read_xls(path = military_path, sheet = sheet, range=\"B9:Q37\"),\n         envir = .GlobalEnv)\n    }\n  })\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in vctrs_vec_compat(.x, .purrr_user_env): object 'military_sheets' not found\n```\n:::\n\n```{.r .cell-code}\nTotalDoD$branch <- \"Total DoD\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in TotalDoD$branch <- \"Total DoD\": object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\nAirForce$branch <- \"Air Force\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in AirForce$branch <- \"Air Force\": object 'AirForce' not found\n```\n:::\n\n```{.r .cell-code}\nMarineCorps$branch <- \"Marine Corps\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in MarineCorps$branch <- \"Marine Corps\": object 'MarineCorps' not found\n```\n:::\n\n```{.r .cell-code}\nNavy$branch <- \"Navy\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in Navy$branch <- \"Navy\": object 'Navy' not found\n```\n:::\n\n```{.r .cell-code}\nArmy$branch <- \"Army\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in Army$branch <- \"Army\": object 'Army' not found\n```\n:::\n\n```{.r .cell-code}\nhead(TotalDoD)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(TotalDoD): object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\nprint(summarytools::dfSummary(TotalDoD, varnumbers = FALSE, plain.ascii = FALSE, style = \"grid\", graph.magnif = 0.70, valid.col = FALSE), method = 'render', table.classes = 'table-condensed')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summarytools::dfSummary(TotalDoD, varnumbers = FALSE, plain.ascii = FALSE, : object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\nhead(AirForce)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(AirForce): object 'AirForce' not found\n```\n:::\n\n```{.r .cell-code}\nprint(summarytools::dfSummary(AirForce, varnumbers = FALSE, plain.ascii = FALSE, style = \"grid\", graph.magnif = 0.70, valid.col = FALSE), method = 'render', table.classes = 'table-condensed')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summarytools::dfSummary(AirForce, varnumbers = FALSE, plain.ascii = FALSE, : object 'AirForce' not found\n```\n:::\n\n```{.r .cell-code}\nhead(MarineCorps)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(MarineCorps): object 'MarineCorps' not found\n```\n:::\n\n```{.r .cell-code}\nprint(summarytools::dfSummary(MarineCorps, varnumbers = FALSE, plain.ascii = FALSE, style = \"grid\", graph.magnif = 0.70, valid.col = FALSE), method = 'render', table.classes = 'table-condensed')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summarytools::dfSummary(MarineCorps, varnumbers = FALSE, plain.ascii = FALSE, : object 'MarineCorps' not found\n```\n:::\n\n```{.r .cell-code}\nhead(Navy)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(Navy): object 'Navy' not found\n```\n:::\n\n```{.r .cell-code}\nprint(summarytools::dfSummary(Navy, varnumbers = FALSE, plain.ascii = FALSE, style = \"grid\", graph.magnif = 0.70, valid.col = FALSE), method = 'render', table.classes = 'table-condensed')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summarytools::dfSummary(Navy, varnumbers = FALSE, plain.ascii = FALSE, : object 'Navy' not found\n```\n:::\n\n```{.r .cell-code}\nhead(Army)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(Army): object 'Army' not found\n```\n:::\n\n```{.r .cell-code}\nprint(summarytools::dfSummary(Army, varnumbers = FALSE, plain.ascii = FALSE, style = \"grid\", graph.magnif = 0.70, valid.col = FALSE), method = 'render', table.classes = 'table-condensed')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summarytools::dfSummary(Army, varnumbers = FALSE, plain.ascii = FALSE, : object 'Army' not found\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nThe data is not tidy, as the counts are split into individual columns based on marital status and gender. To tidy the data, these columns must be collapsed into a three columns: one column denoting the marital status, one column denoting the gender, and one column denoting the count. The expected number of rows in the pivoted dataset, which combines all branches, is 1995. However, there are 285 rows which denote enlisted, officer, and grand totals which need to be removed. Then, the expected number of rows in the pivoted dataset after cleaning is 1710. The expected number of columns in the pivoted dataset is 5; there are 17 columns in the original dataset, 15 columns to be pivoted, and 3 new columns created after pivoting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#existing rows/cases\n\nprint(\"Total DoD Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Total DoD Cases\"\n```\n:::\n\n```{.r .cell-code}\nnrow(TotalDoD)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(TotalDoD): object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Air Force Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Air Force Cases\"\n```\n:::\n\n```{.r .cell-code}\nnrow(AirForce)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(AirForce): object 'AirForce' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"MarineCorps Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MarineCorps Cases\"\n```\n:::\n\n```{.r .cell-code}\nnrow(MarineCorps)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(MarineCorps): object 'MarineCorps' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Navy Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Navy Cases\"\n```\n:::\n\n```{.r .cell-code}\nnrow(Navy)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(Navy): object 'Navy' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Army Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Army Cases\"\n```\n:::\n\n```{.r .cell-code}\nnrow(Army)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(Army): object 'Army' not found\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\n\nprint(\"Total DoD Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Total DoD Cases\"\n```\n:::\n\n```{.r .cell-code}\nncol(TotalDoD)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ncol(TotalDoD): object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Air Force Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Air Force Cases\"\n```\n:::\n\n```{.r .cell-code}\nncol(AirForce)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ncol(AirForce): object 'AirForce' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"MarineCorps Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MarineCorps Cases\"\n```\n:::\n\n```{.r .cell-code}\nncol(MarineCorps)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ncol(MarineCorps): object 'MarineCorps' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Navy Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Navy Cases\"\n```\n:::\n\n```{.r .cell-code}\nncol(Navy)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ncol(Navy): object 'Navy' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Army Cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Army Cases\"\n```\n:::\n\n```{.r .cell-code}\nncol(Army)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ncol(Army): object 'Army' not found\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\n\nprint(\"Expected Rows after Pivot\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Expected Rows after Pivot\"\n```\n:::\n\n```{.r .cell-code}\nnrow(TotalDoD) * (ncol(TotalDoD)-2) + nrow(AirForce) * (ncol(AirForce)-2) + nrow(MarineCorps) * (ncol(MarineCorps)-2) + nrow(Navy) * (ncol(Navy)-2) + nrow(Army) * (ncol(Army)-2) - 60 - 45 - 60 - 60 - 60\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(TotalDoD): object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n\nprint (\"Expected Columns after Pivot\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Expected Columns after Pivot\"\n```\n:::\n\n```{.r .cell-code}\n17 - 15 + 3 #17 columns, 15 columns to be pivoted, 3 columns created\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\nThe default column names of the data are not conducive to pivoting. They need to be renamed in accordance to a pattern in order to facilitate pivoting. The columns are broken down by marital status and gender, so the column names should contain the marital status and gender separated by a common separator such as an underscore. For example, the column of counts for male servicemembers who are \"single without children\" shall be renamed \"swoc_m.\" This enables the use of the pivot_longer function to separate \"swoc\" into a \"marital_status\" column and \"m\" into a \"gender\" column. After pivoting, mutate() and case_when() are utilized in conjunction to recode the new columns into more meaningful values (i.e. \"swoc\" is recoded to \"single without children\" and \"m\" is recoded to \"male\"). Furthermore, the rows representing the enlisted total, officer total, and grand total are to be dropped by using filter() and grepl() to remove rows containing the \"total\" in the \"pay_grade\" column. A function called \"clean_data(dfname)\" is written to apply the aforementioned process across the dataframes corresponding to each respective service branch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- function(dfname) {\n\n  dfname %>% #rename columns by index\n    rename(pay_grade = 1,\n         swoc_m = 2,\n         swoc_f = 3,\n         swoc_t = 4,\n         swc_m = 5,\n         swc_f = 6,\n         swc_t = 7,\n         jsm_m = 8,\n         jsm_f = 9,\n         jsm_t = 10,\n         cm_m = 11,\n         cm_f = 12,\n         cm_t = 13,\n         tot_m = 14,\n         tot_f = 15,\n         tot_t = 16) %>%\n    pivot_longer(\n    cols = !c(pay_grade, branch),\n    names_to = c(\"marital_status\", \"gender\"),\n    names_sep = \"_\",\n    values_to = \"count\"\n  ) %>%\n    mutate(marital_status = case_when(marital_status == \"swoc\" ~ \"single without children\",\n                                      marital_status == \"swc\" ~ \"single with children\",\n                                      marital_status == \"jsm\" ~ \"joint service marriage\",\n                                      marital_status == \"cm\" ~ \"civilian marriage\",\n                                      marital_status == \"tot\" ~ \"total\"),\n           gender = case_when(gender == \"m\" ~ \"male\",\n                              gender == \"f\" ~ \"female\",\n                              gender == \"t\" ~ \"total\")) %>%\n    filter(!grepl('total', pay_grade, ignore.case=TRUE))\n}\n\ndf_list <- list(TotalDoD, AirForce, MarineCorps, Navy, Army) #store dataframes inside list to apply cleaning function\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'TotalDoD' not found\n```\n:::\n\n```{.r .cell-code}\ncleaned_data <- lapply(df_list, clean_data)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in lapply(df_list, clean_data): object 'df_list' not found\n```\n:::\n:::\n\n\n## Join Data\n\nBe sure to include a sanity check, and double-check that case count is correct!\n\nThe cleaning process creates a tibble which contains cleaned versions of the data for each service branch. Each service branch is extracted from the tibble and converted to dataframes, which are then appended by rbind() to create a joined dataset. The joined dataset has 1710 rows and 5 columns (pay_grade, branch, marital_status, gender, count) which is in line with expectation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- as.data.frame(cleaned_data[[1]])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(cleaned_data[[1]]): object 'cleaned_data' not found\n```\n:::\n\n```{.r .cell-code}\ndf2 <- as.data.frame(cleaned_data[[2]])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(cleaned_data[[2]]): object 'cleaned_data' not found\n```\n:::\n\n```{.r .cell-code}\ndf3 <- as.data.frame(cleaned_data[[3]])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(cleaned_data[[3]]): object 'cleaned_data' not found\n```\n:::\n\n```{.r .cell-code}\ndf4 <- as.data.frame(cleaned_data[[4]])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(cleaned_data[[4]]): object 'cleaned_data' not found\n```\n:::\n\n```{.r .cell-code}\ndf5 <- as.data.frame(cleaned_data[[5]])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(cleaned_data[[5]]): object 'cleaned_data' not found\n```\n:::\n\n```{.r .cell-code}\nmilitary <- rbind(df1, df2, df3, df4, df5)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in rbind(df1, df2, df3, df4, df5): object 'df1' not found\n```\n:::\n\n```{.r .cell-code}\nhead(military)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(military): object 'military' not found\n```\n:::\n\n```{.r .cell-code}\nprint(\"Dimensions of Joined Dataset\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Dimensions of Joined Dataset\"\n```\n:::\n\n```{.r .cell-code}\ndim(military)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'military' not found\n```\n:::\n:::\n\n## Visualization\n\nAt the Total DoD level, the most common marital status is single without children, followed by civilian marriage, then joint service marriage, and lastly single with children. The distribution of marital status across individual service branches is very similar, with either single without children or civilian marriage as the most common and joint service marriage or single with children as the least common.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(military,                                      \n       aes(x = marital_status, y=count, fill = branch)) +\n  geom_bar(stat=\"identity\",position = \"dodge\") + theme(axis.text.x = element_text(size = 7)) + xlab(\"Marital Status\") + ggtitle(\"Marital Status of Servicemembers\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(military, aes(x = marital_status, y = count, fill = branch)): object 'military' not found\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}