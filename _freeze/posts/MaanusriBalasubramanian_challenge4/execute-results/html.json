{
  "hash": "7127b330c663c4df766a5fb059bf2a8b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Maanusri Balasubramanian\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"05/05/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - maanusri balasubramanian\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions.xlsx ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reading the dataset from csv\nbookings <- read_csv(\"_data/hotel_bookings.csv\")\n\n# number of rows\nnrow(bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390\n```\n:::\n\n```{.r .cell-code}\n# number of columns\nncol(bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n\n```{.r .cell-code}\n# taking a peak into the dataset\nhead(bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel        is_canceled lead_time arrival_date_year arrival_date_month\n  <chr>              <dbl>     <dbl>             <dbl> <chr>             \n1 Resort Hotel           0       342              2015 July              \n2 Resort Hotel           0       737              2015 July              \n3 Resort Hotel           0         7              2015 July              \n4 Resort Hotel           0        13              2015 July              \n5 Resort Hotel           0        14              2015 July              \n6 Resort Hotel           0        14              2015 July              \n# ℹ 27 more variables: arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>, stays_in_weekend_nights <dbl>,\n#   stays_in_week_nights <dbl>, adults <dbl>, children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, …\n```\n:::\n\n```{.r .cell-code}\n# printing column names\ncolnames(bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [119,390 × 32] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ hotel                         : chr [1:119390] \"Resort Hotel\" \"Resort Hotel\" \"Resort Hotel\" \"Resort Hotel\" ...\n $ is_canceled                   : num [1:119390] 0 0 0 0 0 0 0 0 1 1 ...\n $ lead_time                     : num [1:119390] 342 737 7 13 14 14 0 9 85 75 ...\n $ arrival_date_year             : num [1:119390] 2015 2015 2015 2015 2015 ...\n $ arrival_date_month            : chr [1:119390] \"July\" \"July\" \"July\" \"July\" ...\n $ arrival_date_week_number      : num [1:119390] 27 27 27 27 27 27 27 27 27 27 ...\n $ arrival_date_day_of_month     : num [1:119390] 1 1 1 1 1 1 1 1 1 1 ...\n $ stays_in_weekend_nights       : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ stays_in_week_nights          : num [1:119390] 0 0 1 1 2 2 2 2 3 3 ...\n $ adults                        : num [1:119390] 2 2 1 1 2 2 2 2 2 2 ...\n $ children                      : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ babies                        : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ meal                          : chr [1:119390] \"BB\" \"BB\" \"BB\" \"BB\" ...\n $ country                       : chr [1:119390] \"PRT\" \"PRT\" \"GBR\" \"GBR\" ...\n $ market_segment                : chr [1:119390] \"Direct\" \"Direct\" \"Direct\" \"Corporate\" ...\n $ distribution_channel          : chr [1:119390] \"Direct\" \"Direct\" \"Direct\" \"Corporate\" ...\n $ is_repeated_guest             : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ previous_cancellations        : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ previous_bookings_not_canceled: num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ reserved_room_type            : chr [1:119390] \"C\" \"C\" \"A\" \"A\" ...\n $ assigned_room_type            : chr [1:119390] \"C\" \"C\" \"C\" \"A\" ...\n $ booking_changes               : num [1:119390] 3 4 0 0 0 0 0 0 0 0 ...\n $ deposit_type                  : chr [1:119390] \"No Deposit\" \"No Deposit\" \"No Deposit\" \"No Deposit\" ...\n $ agent                         : chr [1:119390] \"NULL\" \"NULL\" \"NULL\" \"304\" ...\n $ company                       : chr [1:119390] \"NULL\" \"NULL\" \"NULL\" \"NULL\" ...\n $ days_in_waiting_list          : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ customer_type                 : chr [1:119390] \"Transient\" \"Transient\" \"Transient\" \"Transient\" ...\n $ adr                           : num [1:119390] 0 0 75 75 98 ...\n $ required_car_parking_spaces   : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ total_of_special_requests     : num [1:119390] 0 0 0 0 1 1 0 1 1 0 ...\n $ reservation_status            : chr [1:119390] \"Check-Out\" \"Check-Out\" \"Check-Out\" \"Check-Out\" ...\n $ reservation_status_date       : Date[1:119390], format: \"2015-07-01\" \"2015-07-01\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   hotel = col_character(),\n  ..   is_canceled = col_double(),\n  ..   lead_time = col_double(),\n  ..   arrival_date_year = col_double(),\n  ..   arrival_date_month = col_character(),\n  ..   arrival_date_week_number = col_double(),\n  ..   arrival_date_day_of_month = col_double(),\n  ..   stays_in_weekend_nights = col_double(),\n  ..   stays_in_week_nights = col_double(),\n  ..   adults = col_double(),\n  ..   children = col_double(),\n  ..   babies = col_double(),\n  ..   meal = col_character(),\n  ..   country = col_character(),\n  ..   market_segment = col_character(),\n  ..   distribution_channel = col_character(),\n  ..   is_repeated_guest = col_double(),\n  ..   previous_cancellations = col_double(),\n  ..   previous_bookings_not_canceled = col_double(),\n  ..   reserved_room_type = col_character(),\n  ..   assigned_room_type = col_character(),\n  ..   booking_changes = col_double(),\n  ..   deposit_type = col_character(),\n  ..   agent = col_character(),\n  ..   company = col_character(),\n  ..   days_in_waiting_list = col_double(),\n  ..   customer_type = col_character(),\n  ..   adr = col_double(),\n  ..   required_car_parking_spaces = col_double(),\n  ..   total_of_special_requests = col_double(),\n  ..   reservation_status = col_character(),\n  ..   reservation_status_date = col_date(format = \"\")\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n\n```{.r .cell-code}\nunique(bookings$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Resort Hotel\" \"City Hotel\"  \n```\n:::\n\n```{.r .cell-code}\nunique(bookings$arrival_date_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2015 2016 2017\n```\n:::\n\n```{.r .cell-code}\nunique(bookings$customer_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Transient\"       \"Contract\"        \"Transient-Party\" \"Group\"          \n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe dataset contains information about hotel bookings made in Resort Hotel and City Hotel during the years 2015, 2016 and 2017. The dataset contains 119390 rows and 32 columns. Each entry in the dataset contains information about a particular booking like guest information, date of arrival, room information, payment information, show/no-show information, etc. \n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nThe data is not tidy and work needs to be done:\n1. The date information is split in multiple columns, combining these would make is easier for analysis. Creating a new column \"arrival_date\" by getting the date from \"arrival_date_day_of_month\", \"arrival_date_month\",\"arrival_date_year\" columns and dropping these 3 columns.\n2. previous_bookings_not_canceled - this information is redundant and can be calculated from the columns \"stays_in_weekend_nights\" and \"stays_in_week_nights\". So we can drop this column.\n3. is_repeated_guest - again, this is redundant information. If atleast one of \"stays_in_weekend_nights\" and \"stays_in_week_nights\" is non-zero, then is_repeated_guest would be 1, else 0. So we can remove this column too.\n\nWe'll be dropping 3 + 1 + 1 columns and adding 1 column. So we'll have 28 columns after tidying. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# checking out the values in columns to better understand the data\nunique(bookings$is_repeated_guest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1\n```\n:::\n\n```{.r .cell-code}\nselect(bookings, previous_bookings_not_canceled)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 1\n   previous_bookings_not_canceled\n                            <dbl>\n 1                              0\n 2                              0\n 3                              0\n 4                              0\n 5                              0\n 6                              0\n 7                              0\n 8                              0\n 9                              0\n10                              0\n# ℹ 119,380 more rows\n```\n:::\n\n```{.r .cell-code}\n# combining arrival date information into 1 column\ntidy_bookings <- bookings %>%\n  mutate(arrival_date = (str_c(arrival_date_day_of_month, arrival_date_month, arrival_date_year, sep = \"/\")), arrival_date = dmy(arrival_date), .after = lead_time)\n\n# removing all the above mentioned redundant data\ntidy_bookings <- tidy_bookings[,-c(5, 6, 8, 14, 16)]\ntidy_bookings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 28\n   hotel        is_canceled lead_time arrival_date arrival_date_week_number\n   <chr>              <dbl>     <dbl> <date>                          <dbl>\n 1 Resort Hotel           0       342 2015-07-01                         27\n 2 Resort Hotel           0       737 2015-07-01                         27\n 3 Resort Hotel           0         7 2015-07-01                         27\n 4 Resort Hotel           0        13 2015-07-01                         27\n 5 Resort Hotel           0        14 2015-07-01                         27\n 6 Resort Hotel           0        14 2015-07-01                         27\n 7 Resort Hotel           0         0 2015-07-01                         27\n 8 Resort Hotel           0         9 2015-07-01                         27\n 9 Resort Hotel           1        85 2015-07-01                         27\n10 Resort Hotel           1        75 2015-07-01                         27\n# ℹ 119,380 more rows\n# ℹ 23 more variables: stays_in_weekend_nights <dbl>,\n#   stays_in_week_nights <dbl>, adults <dbl>, children <dbl>, babies <dbl>,\n#   country <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, …\n```\n:::\n:::\n\n\nAny additional comments?\n\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\nThe column \"agent\" is stored as string. Looking at it, the codes range from 1 to 535. So we can convert these to numeric type, for easier analysis/filtering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# checking out the values in the column \"agent\"\nunique(bookings$agent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"NULL\" \"304\"  \"240\"  \"303\"  \"15\"   \"241\"  \"8\"    \"250\"  \"115\"  \"5\"   \n [11] \"175\"  \"134\"  \"156\"  \"243\"  \"242\"  \"3\"    \"105\"  \"40\"   \"147\"  \"306\" \n [21] \"184\"  \"96\"   \"2\"    \"127\"  \"95\"   \"146\"  \"9\"    \"177\"  \"6\"    \"143\" \n [31] \"244\"  \"149\"  \"167\"  \"300\"  \"171\"  \"305\"  \"67\"   \"196\"  \"152\"  \"142\" \n [41] \"261\"  \"104\"  \"36\"   \"26\"   \"29\"   \"258\"  \"110\"  \"71\"   \"181\"  \"88\"  \n [51] \"251\"  \"275\"  \"69\"   \"248\"  \"208\"  \"256\"  \"314\"  \"126\"  \"281\"  \"273\" \n [61] \"253\"  \"185\"  \"330\"  \"334\"  \"328\"  \"326\"  \"321\"  \"324\"  \"313\"  \"38\"  \n [71] \"155\"  \"68\"   \"335\"  \"308\"  \"332\"  \"94\"   \"348\"  \"310\"  \"339\"  \"375\" \n [81] \"66\"   \"327\"  \"387\"  \"298\"  \"91\"   \"245\"  \"385\"  \"257\"  \"393\"  \"168\" \n [91] \"405\"  \"249\"  \"315\"  \"75\"   \"128\"  \"307\"  \"11\"   \"436\"  \"1\"    \"201\" \n[101] \"183\"  \"223\"  \"368\"  \"336\"  \"291\"  \"464\"  \"411\"  \"481\"  \"10\"   \"154\" \n[111] \"468\"  \"410\"  \"390\"  \"440\"  \"495\"  \"492\"  \"493\"  \"434\"  \"57\"   \"531\" \n[121] \"420\"  \"483\"  \"526\"  \"472\"  \"429\"  \"16\"   \"446\"  \"34\"   \"78\"   \"139\" \n[131] \"252\"  \"270\"  \"47\"   \"114\"  \"301\"  \"193\"  \"182\"  \"135\"  \"350\"  \"195\" \n[141] \"352\"  \"355\"  \"159\"  \"363\"  \"384\"  \"360\"  \"331\"  \"367\"  \"64\"   \"406\" \n[151] \"163\"  \"414\"  \"333\"  \"427\"  \"431\"  \"430\"  \"426\"  \"438\"  \"433\"  \"418\" \n[161] \"441\"  \"282\"  \"432\"  \"72\"   \"450\"  \"180\"  \"454\"  \"455\"  \"59\"   \"451\" \n[171] \"254\"  \"358\"  \"469\"  \"165\"  \"467\"  \"510\"  \"337\"  \"476\"  \"502\"  \"527\" \n[181] \"479\"  \"508\"  \"535\"  \"302\"  \"497\"  \"187\"  \"13\"   \"7\"    \"27\"   \"14\"  \n[191] \"22\"   \"17\"   \"28\"   \"42\"   \"20\"   \"19\"   \"45\"   \"37\"   \"61\"   \"39\"  \n[201] \"21\"   \"24\"   \"41\"   \"50\"   \"30\"   \"54\"   \"52\"   \"12\"   \"44\"   \"31\"  \n[211] \"83\"   \"32\"   \"63\"   \"60\"   \"55\"   \"56\"   \"89\"   \"87\"   \"118\"  \"86\"  \n[221] \"85\"   \"210\"  \"214\"  \"129\"  \"179\"  \"138\"  \"174\"  \"170\"  \"153\"  \"93\"  \n[231] \"151\"  \"119\"  \"35\"   \"173\"  \"58\"   \"53\"   \"133\"  \"79\"   \"235\"  \"192\" \n[241] \"191\"  \"236\"  \"162\"  \"215\"  \"157\"  \"287\"  \"132\"  \"234\"  \"98\"   \"77\"  \n[251] \"103\"  \"107\"  \"262\"  \"220\"  \"121\"  \"205\"  \"378\"  \"23\"   \"296\"  \"290\" \n[261] \"229\"  \"33\"   \"286\"  \"276\"  \"425\"  \"484\"  \"323\"  \"403\"  \"219\"  \"394\" \n[271] \"509\"  \"111\"  \"423\"  \"4\"    \"70\"   \"82\"   \"81\"   \"74\"   \"92\"   \"99\"  \n[281] \"90\"   \"112\"  \"117\"  \"106\"  \"148\"  \"158\"  \"144\"  \"211\"  \"213\"  \"216\" \n[291] \"232\"  \"150\"  \"267\"  \"227\"  \"247\"  \"278\"  \"280\"  \"285\"  \"289\"  \"269\" \n[301] \"295\"  \"265\"  \"288\"  \"122\"  \"294\"  \"325\"  \"341\"  \"344\"  \"346\"  \"359\" \n[311] \"283\"  \"364\"  \"370\"  \"371\"  \"25\"   \"141\"  \"391\"  \"397\"  \"416\"  \"404\" \n[321] \"299\"  \"197\"  \"73\"   \"354\"  \"444\"  \"408\"  \"461\"  \"388\"  \"453\"  \"459\" \n[331] \"474\"  \"475\"  \"480\"  \"449\" \n```\n:::\n\n```{.r .cell-code}\n# selecting and converting type to numeric (in case of \"null\" values, it gets set to NA)\nagent <- select(bookings, agent)\nbookings$agent <- as.numeric(as.character(bookings$agent))\n\n# sanity check\nagent_nums <- unique(bookings$agent)\nagent_nums[order(agent_nums)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  19\n [19]  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37\n [37]  38  39  40  41  42  44  45  47  50  52  53  54  55  56  57  58  59  60\n [55]  61  63  64  66  67  68  69  70  71  72  73  74  75  77  78  79  81  82\n [73]  83  85  86  87  88  89  90  91  92  93  94  95  96  98  99 103 104 105\n [91] 106 107 110 111 112 114 115 117 118 119 121 122 126 127 128 129 132 133\n[109] 134 135 138 139 141 142 143 144 146 147 148 149 150 151 152 153 154 155\n[127] 156 157 158 159 162 163 165 167 168 170 171 173 174 175 177 179 180 181\n[145] 182 183 184 185 187 191 192 193 195 196 197 201 205 208 210 211 213 214\n[163] 215 216 219 220 223 227 229 232 234 235 236 240 241 242 243 244 245 247\n[181] 248 249 250 251 252 253 254 256 257 258 261 262 265 267 269 270 273 275\n[199] 276 278 280 281 282 283 285 286 287 288 289 290 291 294 295 296 298 299\n[217] 300 301 302 303 304 305 306 307 308 310 313 314 315 321 323 324 325 326\n[235] 327 328 330 331 332 333 334 335 336 337 339 341 344 346 348 350 352 354\n[253] 355 358 359 360 363 364 367 368 370 371 375 378 384 385 387 388 390 391\n[271] 393 394 397 403 404 405 406 408 410 411 414 416 418 420 423 425 426 427\n[289] 429 430 431 432 433 434 436 438 440 441 444 446 449 450 451 453 454 455\n[307] 459 461 464 467 468 469 472 474 475 476 479 480 481 483 484 492 493 495\n[325] 497 502 508 509 510 526 527 531 535  NA\n```\n:::\n:::\n\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}