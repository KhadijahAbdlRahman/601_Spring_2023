{
  "hash": "db632924c109f182fbda6bc45ee54629",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4: Hotel Data\"\nauthor: \"Dirichi Umunna\"\ndescription: \"Making Hotel Data useable\"\ndate: \"04/18/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - Dirichi Umunna\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(summarytools)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Introduction\n\nUsing the hotel dataset this blog post will be exploring a dataset with the aim of transforming it into a tidy format. Our tasks for today include; describing the dataset using both words and supporting information, tidying the data and performing sanity checks, identifying variables that require mutation, mutating the variables, and then performing a final sanity check to ensure that all the mutations have been performed accurately. By the end of this exercise, we should have a clean and well-organized dataset, ready for further analysis and interpretation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in data\nnewhotel <- read_csv(\"_data/hotel_bookings.csv\")\nhead(newhotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n\n```{.r .cell-code}\ndim(newhotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     32\n```\n:::\n:::\n\n\n## Description\n\nThe hotel dataset is a collection of records containing information about hotel bookings. It includes information about the hotel, such as its name, location, and the type of meal provided. It also includes information about the booking itself, such as the lead time, the number of guests, and whether the booking was cancelled or not. This is potentially a valuable resource for exploring patterns in hotel bookings and understanding customer behavior.\n\n## The Problem\n\nSuppose we want to analyze the average daily rate of hotel customers over a certain period of time. To achieve this, we first need to clean the dataset and extract the specific variables of interest. One of the challenges we encounter is the messy date data, which is spread across multiple columns. However, we can easily fix this issue to make the data more manageable and informative for our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#let us make a dataframe for the arrival columns\n\narrival_cols <- grep(\"^arrival\", colnames(newhotel), value = TRUE)\narrival_cols\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"arrival_date_year\"         \"arrival_date_month\"       \n[3] \"arrival_date_week_number\"  \"arrival_date_day_of_month\"\n```\n:::\n\n```{.r .cell-code}\n##we begin here by concatenating the three distinct columns for dates together, then converting them to dates.\nnewhotel<- newhotel%>%\n  mutate(dateofarrival = str_c(arrival_date_day_of_month,\n                              arrival_date_month,\n                              arrival_date_year, sep=\"/\"),\n         dateofarrival = dmy(dateofarrival))%>%\n  select(-starts_with(\"arrival\"))\n                 \n\nhead(newhotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 29\n  hotel      is_ca…¹ lead_…² stays…³ stays…⁴ adults child…⁵ babies meal  country\n  <chr>        <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr> <chr>  \n1 Resort Ho…       0     342       0       0      2       0      0 BB    PRT    \n2 Resort Ho…       0     737       0       0      2       0      0 BB    PRT    \n3 Resort Ho…       0       7       0       1      1       0      0 BB    GBR    \n4 Resort Ho…       0      13       0       1      1       0      0 BB    GBR    \n5 Resort Ho…       0      14       0       2      2       0      0 BB    GBR    \n6 Resort Ho…       0      14       0       2      2       0      0 BB    GBR    \n# … with 19 more variables: market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\n## Tidy Data\n\nLet's shift our focus to the ADR column now that we have made the dates easier to manipulate. Our next step is to tidy the data by selecting the ADR variable and checking if it requires any modifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for missing values in adr column using is.na()\nsum(is.na(newhotel$adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n#thankfully there is no missing data here.\n\n#let us perform a sanity check on our dimensions\ndim(newhotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     29\n```\n:::\n\n```{.r .cell-code}\n#let us rearrange this for further emphasis on our variables\n\nnewhotelfinal <- newhotel %>% \n  select(dateofarrival, adr, everything())\n```\n:::\n\n\n## Conclusion\n\nWith the new date column and properly formatted adr rates, our dataset is now primed for deeper analysis and exploration of trends over time. By combining and tidying these key variables, we have set the stage for uncovering valuable insights and patterns within our data.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}