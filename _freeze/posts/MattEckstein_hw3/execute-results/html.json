{
  "hash": "2d4292d7b2044087872edae13a4f4139",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Matt Eckstein\"\ndesription: \"Challenge 3 - Matt Eckstein - Animal Weight\"\ndate: \"03/17/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n\n  - challenge_2\n  - Matt Eckstein\n  - animal_weight.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n\n## Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals <- read.csv(\"_data/animal_weight.csv\")\n\nhead(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            IPCC.Area Cattle...dairy Cattle...non.dairy Buffaloes\n1 Indian Subcontinent            275                110       295\n2      Eastern Europe            550                391       380\n3              Africa            275                173       380\n4             Oceania            500                330       380\n5      Western Europe            600                420       380\n6       Latin America            400                305       380\n  Swine...market Swine...breeding Chicken...Broilers Chicken...Layers Ducks\n1             28               28                0.9              1.8   2.7\n2             50              180                0.9              1.8   2.7\n3             28               28                0.9              1.8   2.7\n4             45              180                0.9              1.8   2.7\n5             50              198                0.9              1.8   2.7\n6             28               28                0.9              1.8   2.7\n  Turkeys Sheep Goats Horses Asses Mules Camels Llamas\n1     6.8  28.0  30.0    238   130   130    217    217\n2     6.8  48.5  38.5    377   130   130    217    217\n3     6.8  28.0  30.0    238   130   130    217    217\n4     6.8  48.5  38.5    377   130   130    217    217\n5     6.8  48.5  38.5    377   130   130    217    217\n6     6.8  28.0  30.0    238   130   130    217    217\n```\n:::\n\n```{.r .cell-code}\nsummarize(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata frame with 0 columns and 1 row\n```\n:::\n:::\n\n\n## Briefly describe the data and Anticipate the End Result\n\nThis data describes the average weights of common types of livestock across regions of the world. Its 17 columns make it somewhat difficult to read, and it could be more legible if it were grouped with only 3 columns and location-livestock type pairs as cases. \n\n## Find current and future data dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nncol(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n:::\n\n\n\nThere are 17 columns, 16 of which are animals (variables) and not the column containing the names of the observations.\n\nThere are 9 observations of 17 variables. I need 1 variable to identify a case, and there will be n * (k - number of variables used to identify a case) rows in the result.  9 * (17-1) = 144. So, we expect the result of our pivoting to have 144 rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(animals) * (ncol(animals)-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n\n\n\n## Pivot the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals2 <- pivot_longer(animals, `Cattle...dairy`:`Llamas`, names_to = \"type\", values_to = \"weights\")\n```\n:::\n\n\n## Describe the final dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(animals2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n\n```{.r .cell-code}\nncol(animals2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\nThe final table does in fact have 144 rows and 3 columns.\n\n## New cases and what makes the new data tidy\n\nNow that the data is pivoted, a case is a pairing of an IPCC area and an animal type. This data is tidy because every variable (IPCC area, animal type, and weight) is a column, and every observation (an area-type pairing) is a row.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}