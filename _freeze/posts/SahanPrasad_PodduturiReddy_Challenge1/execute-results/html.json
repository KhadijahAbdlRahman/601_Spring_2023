{
  "hash": "0e8d94378d2da0d63e4bc2aa137e1b35",
  "result": {
    "markdown": "---\ntsitle: \"Categorizing Wild Bird population size based on their body weight\"\nauthor: \"Sahan Prasad Podduturi Reddy\"\ndesription: \"Reading in data and creating a post\"\ndate: \"02/19/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - wild_bird_data.xlsx\n  - Sahan Prasad Podduturi Reddy\n---\n\n## Introduction\n\nI was trying to analyze the 'wild_bird_data.xlsx' dataset in order to determine the subject of the dataset. This dataset summarizes the population size of wild bird species based on their body weight. We first start by importing the necessary libraries and setting the working directory to point to the location where the spreadsheet is located.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(ggplot2)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\n```\n:::\n\n## Clean file and Obtain Summary Statistics\n\nNotice that the first line in the spreadsheet is referring to where data is obtained from. This line is removed and the data is summarized for both the columns.Notice that the mean is a lot lesser than the maximum value for both the columns indicating that there are some very large value outliers in the dataset. The data is also left skewed as there are a lot of values clustered around the left. The mean is higher than the median because the few outliers pull the mean up. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\ndataframe <- read_excel(\"wild_bird_data.xlsx\", skip=1)\nprint(dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 146 × 2\n   `Wet body weight [g]` `Population size`\n                   <dbl>             <dbl>\n 1                  5.46           532194.\n 2                  7.76          3165107.\n 3                  8.64          2592997.\n 4                 10.7           3524193.\n 5                  7.42           389806.\n 6                  9.12           604766.\n 7                  8.04           192361.\n 8                  8.70           250452.\n 9                  8.89            16997.\n10                  9.52              595.\n# … with 136 more rows\n```\n:::\n\n```{.r .cell-code}\nsummary(dataframe$`Population size`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      5    1821   24353  382874  198515 5093378 \n```\n:::\n\n```{.r .cell-code}\nsummary(dataframe$`Wet body weight [g]`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   5.459   18.620   69.232  363.694  309.826 9639.845 \n```\n:::\n:::\n\n## Decribe data\n\nFirst sorted the data according to the individual body weight and then assign each to a WeightClass in order to understand which category each bird falls into. Also assigned each bird to a PopulationClass based on Population Size.\nPlotted graphs which further confirm the skewness.\n\n::: {.cell}\n\n```{.r .cell-code}\ndataframe <- arrange(dataframe, `Wet body weight [g]`)\ndataframe <- mutate(dataframe, WtClass = case_when(\n  `Wet body weight [g]` <= 10 ~ \"Flyweight\",\n  `Wet body weight [g]` > 10 & `Wet body weight [g]` <= 30 ~ \"Bantamweight\",\n  `Wet body weight [g]` > 30 & `Wet body weight [g]` <= 60 ~ \"Featherweight\",\n  `Wet body weight [g]` > 60 & `Wet body weight [g]` <= 100 ~ \"Lightweight\",\n  `Wet body weight [g]` > 100 & `Wet body weight [g]` <= 300 ~ \"Welterweight\",\n  `Wet body weight [g]` > 300 & `Wet body weight [g]` <= 600 ~ \"Middleweight\",\n  `Wet body weight [g]` > 600 & `Wet body weight [g]` <= 1000 ~ \"Light HeavyWeight\",\n  `Wet body weight [g]` > 1000 ~ \"Heavyweight\"\n))\n\ndataframe <- mutate(dataframe, PopulationClass = case_when(\n  `Population size` <= 1000000 ~ \"< 1M\",\n  `Population size` > 1000000 & `Population size` <= 2000000 ~ \"1M-2M\",\n  `Population size` > 2000000 & `Population size` <= 3000000 ~ \"2M-3M\",\n  `Population size` > 3000000 & `Population size` <= 4000000 ~ \"3M-4M\",\n  `Population size` > 4000000 & `Population size` <= 5000000 ~ \"4M-5M\",\n  `Population size` > 5000000 ~ \"> 5M\",\n))\nprint(dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 146 × 4\n   `Wet body weight [g]` `Population size` WtClass      PopulationClass\n                   <dbl>             <dbl> <chr>        <chr>          \n 1                  5.46           532194. Flyweight    < 1M           \n 2                  7.42           389806. Flyweight    < 1M           \n 3                  7.76          3165107. Flyweight    3M-4M          \n 4                  8.04           192361. Flyweight    < 1M           \n 5                  8.64          2592997. Flyweight    2M-3M          \n 6                  8.70           250452. Flyweight    < 1M           \n 7                  8.89            16997. Flyweight    < 1M           \n 8                  9.12           604766. Flyweight    < 1M           \n 9                  9.52              595. Flyweight    < 1M           \n10                 10.1             74386. Bantamweight < 1M           \n# … with 136 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(dataframe, aes(`WtClass`)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](SahanPrasad_PodduturiReddy_Challenge1_files/figure-html/DescribeFile-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(dataframe, aes(`PopulationClass`)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](SahanPrasad_PodduturiReddy_Challenge1_files/figure-html/DescribeFile-2.png){width=672}\n:::\n:::\n\n## Conclusion\n\nThe wild_bird_data.xlsx contains information about wild bird species based on individual body weight and Population size",
    "supporting": [
      "SahanPrasad_PodduturiReddy_Challenge1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}