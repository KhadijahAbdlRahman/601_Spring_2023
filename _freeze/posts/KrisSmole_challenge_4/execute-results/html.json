{
  "hash": "7dc9905175bde4234dd9005bfc9625db",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Kris Smole\"\ndesription: \"Fed Funds Rate dataset\"\ndate: \"03/24/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - fed_rates\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(lubridate)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n## A Brief Introduction to the Fed Funds Rate Dataset\n\nWe see the Fed Funds Rate dataset is a comma-separated file (a type of text file) that has 10 columns and 904 rows of mostly numeric and date information, with column headings making up all of the text within the dataset. Although it looks like an Excel spreadsheet, it has none of the metadata that can make Excel files complex to work with in R, and is otherwise a much simpler file structure. Many of the columns contain the value of \"NA\", which is accurate in terms of the exact effective date when the particular rate is valid, as the indicators can change from day to day, and are only reported or released on a certain date. Although accurate, the \"NA\" value can prevent accurate analysis. We will look at fixing this issue below.\n\nLet's look at the dataframe in RStudio, and see what data types it includes, and what changes need to be made so it is \"tidy\" and easily manipulated for analysis. (We know from past challenges that how the dataframe appears in RStudio and on html is slightly different than how it appears in a .csv or .xls file, so we'll keep taht and mind and touch on it later). At the bottom of the display of the dataframe, a list of the columns follows that details the datatypes within the dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nffr<-read_csv(\"_data/FedFundsRate.csv\")\ndim(ffr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 904  10\n```\n:::\n\n```{.r .cell-code}\nffr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 904 × 10\n    Year Month   Day Federal F…¹ Feder…² Feder…³ Effec…⁴ Real …⁵ Unemp…⁶ Infla…⁷\n   <dbl> <dbl> <dbl>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1  1954     7     1          NA      NA      NA    0.8      4.6     5.8      NA\n 2  1954     8     1          NA      NA      NA    1.22    NA       6        NA\n 3  1954     9     1          NA      NA      NA    1.06    NA       6.1      NA\n 4  1954    10     1          NA      NA      NA    0.85     8       5.7      NA\n 5  1954    11     1          NA      NA      NA    0.83    NA       5.3      NA\n 6  1954    12     1          NA      NA      NA    1.28    NA       5        NA\n 7  1955     1     1          NA      NA      NA    1.39    11.9     4.9      NA\n 8  1955     2     1          NA      NA      NA    1.29    NA       4.7      NA\n 9  1955     3     1          NA      NA      NA    1.35    NA       4.6      NA\n10  1955     4     1          NA      NA      NA    1.43     6.7     4.7      NA\n# … with 894 more rows, and abbreviated variable names\n#   ¹​`Federal Funds Target Rate`, ²​`Federal Funds Upper Target`,\n#   ³​`Federal Funds Lower Target`, ⁴​`Effective Federal Funds Rate`,\n#   ⁵​`Real GDP (Percent Change)`, ⁶​`Unemployment Rate`, ⁷​`Inflation Rate`\n```\n:::\n\n```{.r .cell-code}\nspec(ffr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  Year = col_double(),\n  Month = col_double(),\n  Day = col_double(),\n  `Federal Funds Target Rate` = col_double(),\n  `Federal Funds Upper Target` = col_double(),\n  `Federal Funds Lower Target` = col_double(),\n  `Effective Federal Funds Rate` = col_double(),\n  `Real GDP (Percent Change)` = col_double(),\n  `Unemployment Rate` = col_double(),\n  `Inflation Rate` = col_double()\n)\n```\n:::\n:::\n\n\n\n### Description of Fed Funds Rate Data\n\nNow that we view the contents of the file onscreen, we see more details.\n\nThe Fed Funds Rate dataset includes data for various national economic indicators are already listed chronologically beginning in mid-1954 through early 2017, covering federal funds rates, inflation rates, and unemployment rates. Some economic indicators are present consistently throughout the time period, while others begin later in the time span. Additionally, although most of the data occurs at the first or last day of a month or quarter, one indicator, the Federal Funds Target Rate, also occurs somewhat irregularly: on specific dates, in addition to the first or last day of the month or quarter, with no other economic indicator reported for that specific irregular date. Again, this dataset has 10 columns and 904 rows - with 7 economic indicators listed as columns.\n\nThe list of datatypes of each column repeats what we see in the dataframe column heading. All of the columns of the dataset are 'dbl' or double datatypes, which are numbers with decimal places. This is to be expected, as the indicators are expressed percentages, although the dataframe does not include percent signs. Because we may want to calculate using the indicators at some point, later in this report we add columns to the dataset to represent the indicators in the appropriate decimal form to make easy calculations. For example, an indicator of 1.0 is 1.0%, not 100%, as 1.00 typically is represented numerically. So the indicator of 1.0 or 1.0% is accruately represented numerically as .0100 . More on this later.\n\n## Steps Required to make this dataset 'Tidy'\n\n\nSince the dataset has 7 economic indicators listed as columns, we're going to move those to be rows to properly reflect the economic indicator data points as observations. The economic indicator columns represent observations for the specific dates, and as oobservations, must be reflected in rows with the corresponding date. So, we'll use the pivot_longer function to make the dataset 'tidy' so each line represents an observation, and every column represents a variable. After pivoting, the dataset will have 5 variables represented in the columns: year, month, day, economic indicator name and rates of the economic indicator on the specified date. \n\nWe'll pivot 7 variables into a longer format, where the 7 variable names will move into the 'names_to' pivot function variable, and the current values in each of those corresponding columns will move into the 'values_to' pivot function variable.\n\nThe Fed Funds Rate example currently has n = 904 rows and has 5 columns being pivoted. We expect the pivoted dataset to have $n*7 = 6328$ rows x 5 columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nffrpl<-ffr %>% pivot_longer(\n  cols = \"Federal Funds Target Rate\":\"Inflation Rate\",\n  names_to = \"Economic Indicator\",\n  values_to = \"Rates of Specified Date\")\n```\n:::\n\n  \nWe do see the pivoted dataset does have 6328 rows and 5 columns, as we estimated in our calculation.\n\nNow the 3 columns with year, month and date need to be changed to allow easier analysis. We will combine the day, month and year into one column. Because date-related calculations can be very complex there are a variety of ways to code dates. For this dataset, we will use a relatively simplistic coding of the date, as we are not concerned with the time of the particular date, or the time zone of the date of the indicators.\n\n\n## Using Mutate to Create Changes That Convert Data for Easier Analysis\n\nLet's use a mutate function to clear away the \"NA\" and make those cells blank. This will help clean up the look of this dataframe when it is viewed. We may need to consider another option to remove the \"NA\" if this choice causes issues with future calculations. In HTML, the blank appears as \"\", which is the code used to create the blank in the on screen representation of dataframe. I guess you'll just have to believe me that the blanks appeared in place of the NA on my screen in RStudio....\n\nThe end of the dataframe is also displayed to show additional lines of indicator values, as the first 10 lines of the dataframe has relatively few indicator values because of when in time the various indicators began to be reported, which result in blank cells for those dates.\n\n::: {.cell}\n\n```{.r .cell-code}\nffrpl$`Rates of Specified Date`[is.na(ffrpl$`Rates of Specified Date`)] <- \"\"\nffrpl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,328 × 5\n    Year Month   Day `Economic Indicator`         `Rates of Specified Date`\n   <dbl> <dbl> <dbl> <chr>                        <chr>                    \n 1  1954     7     1 Federal Funds Target Rate    \"\"                       \n 2  1954     7     1 Federal Funds Upper Target   \"\"                       \n 3  1954     7     1 Federal Funds Lower Target   \"\"                       \n 4  1954     7     1 Effective Federal Funds Rate \"0.8\"                    \n 5  1954     7     1 Real GDP (Percent Change)    \"4.6\"                    \n 6  1954     7     1 Unemployment Rate            \"5.8\"                    \n 7  1954     7     1 Inflation Rate               \"\"                       \n 8  1954     8     1 Federal Funds Target Rate    \"\"                       \n 9  1954     8     1 Federal Funds Upper Target   \"\"                       \n10  1954     8     1 Federal Funds Lower Target   \"\"                       \n# … with 6,318 more rows\n```\n:::\n\n```{.r .cell-code}\ntail(ffrpl,20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 5\n    Year Month   Day `Economic Indicator`         `Rates of Specified Date`\n   <dbl> <dbl> <dbl> <chr>                        <chr>                    \n 1  2017     2     1 Federal Funds Upper Target   \"0.75\"                   \n 2  2017     2     1 Federal Funds Lower Target   \"0.5\"                    \n 3  2017     2     1 Effective Federal Funds Rate \"0.66\"                   \n 4  2017     2     1 Real GDP (Percent Change)    \"\"                       \n 5  2017     2     1 Unemployment Rate            \"4.7\"                    \n 6  2017     2     1 Inflation Rate               \"2.2\"                    \n 7  2017     3     1 Federal Funds Target Rate    \"\"                       \n 8  2017     3     1 Federal Funds Upper Target   \"0.75\"                   \n 9  2017     3     1 Federal Funds Lower Target   \"0.5\"                    \n10  2017     3     1 Effective Federal Funds Rate \"\"                       \n11  2017     3     1 Real GDP (Percent Change)    \"\"                       \n12  2017     3     1 Unemployment Rate            \"\"                       \n13  2017     3     1 Inflation Rate               \"\"                       \n14  2017     3    16 Federal Funds Target Rate    \"\"                       \n15  2017     3    16 Federal Funds Upper Target   \"1\"                      \n16  2017     3    16 Federal Funds Lower Target   \"0.75\"                   \n17  2017     3    16 Effective Federal Funds Rate \"\"                       \n18  2017     3    16 Real GDP (Percent Change)    \"\"                       \n19  2017     3    16 Unemployment Rate            \"\"                       \n20  2017     3    16 Inflation Rate               \"\"                       \n```\n:::\n:::\n\nThe column Rates of Specified Dates is a character datatype <chr>, as we can see in the displayed content of the dataframe after performing the change of NA to blanks. Rates of Specified Dates must be a <num> datatype, which in addition to accurately depicting the column, it will also allow for decimal places, given we are working with rates and percentages in this column. Note the change to the datatype under the column heading in the output below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(ffrpl, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Year                   Month                     Day \n              \"numeric\"               \"numeric\"               \"numeric\" \n     Economic Indicator Rates of Specified Date \n            \"character\"             \"character\" \n```\n:::\n\n```{.r .cell-code}\nffrpl$`Rates of Specified Date` <- as.numeric(as.character(ffrpl$`Rates of Specified Date`))\n\nsapply(ffrpl, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Year                   Month                     Day \n              \"numeric\"               \"numeric\"               \"numeric\" \n     Economic Indicator Rates of Specified Date \n            \"character\"               \"numeric\" \n```\n:::\n\n```{.r .cell-code}\nffrpl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,328 × 5\n    Year Month   Day `Economic Indicator`         `Rates of Specified Date`\n   <dbl> <dbl> <dbl> <chr>                                            <dbl>\n 1  1954     7     1 Federal Funds Target Rate                         NA  \n 2  1954     7     1 Federal Funds Upper Target                        NA  \n 3  1954     7     1 Federal Funds Lower Target                        NA  \n 4  1954     7     1 Effective Federal Funds Rate                       0.8\n 5  1954     7     1 Real GDP (Percent Change)                          4.6\n 6  1954     7     1 Unemployment Rate                                  5.8\n 7  1954     7     1 Inflation Rate                                    NA  \n 8  1954     8     1 Federal Funds Target Rate                         NA  \n 9  1954     8     1 Federal Funds Upper Target                        NA  \n10  1954     8     1 Federal Funds Lower Target                        NA  \n# … with 6,318 more rows\n```\n:::\n:::\n\n\nAfter changing the datatype of the Rate of Specified Date column using a function in R, it is now \"numeric\" in the display of column headings and datatype. The column is labelled <dbl> under the column heading in the dataframe display. \n\nWe also see the NA is back, after making this datatype change to numeric. This issue will require further problem solving in another challenge.\n\nNow we move on to making a data column that combines the month, day and year into Month/Day/Year format.\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_cols <- c(\"Month\", \"Day\", \"Year\")\n\nffrpl$MonthDayYear <- do.call(paste, c(ffrpl[date_cols], sep = \"/\"))\n  \n\nffrpl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,328 × 6\n    Year Month   Day `Economic Indicator`         Rates of Specified D…¹ Month…²\n   <dbl> <dbl> <dbl> <chr>                                         <dbl> <chr>  \n 1  1954     7     1 Federal Funds Target Rate                      NA   7/1/19…\n 2  1954     7     1 Federal Funds Upper Target                     NA   7/1/19…\n 3  1954     7     1 Federal Funds Lower Target                     NA   7/1/19…\n 4  1954     7     1 Effective Federal Funds Rate                    0.8 7/1/19…\n 5  1954     7     1 Real GDP (Percent Change)                       4.6 7/1/19…\n 6  1954     7     1 Unemployment Rate                               5.8 7/1/19…\n 7  1954     7     1 Inflation Rate                                 NA   7/1/19…\n 8  1954     8     1 Federal Funds Target Rate                      NA   8/1/19…\n 9  1954     8     1 Federal Funds Upper Target                     NA   8/1/19…\n10  1954     8     1 Federal Funds Lower Target                     NA   8/1/19…\n# … with 6,318 more rows, and abbreviated variable names\n#   ¹​`Rates of Specified Date`, ²​MonthDayYear\n```\n:::\n:::\n\nThe Month/Day/Year column appears on the right side of the dataframe as expected. It is a character datatype as-is, so to enable date calculations in future analysis, we'll change the datatype of the new combined date column to date as our next step.\n\n## Use of Lubridate for Month/Day/Year Column\n\n::: {.cell}\n\n```{.r .cell-code}\nffrpl$MonthDayYear <- mdy(ffrpl$MonthDayYear)\n\nffrpl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,328 × 6\n    Year Month   Day `Economic Indicator`         Rates of Specifie…¹ MonthDay…²\n   <dbl> <dbl> <dbl> <chr>                                      <dbl> <date>    \n 1  1954     7     1 Federal Funds Target Rate                   NA   1954-07-01\n 2  1954     7     1 Federal Funds Upper Target                  NA   1954-07-01\n 3  1954     7     1 Federal Funds Lower Target                  NA   1954-07-01\n 4  1954     7     1 Effective Federal Funds Rate                 0.8 1954-07-01\n 5  1954     7     1 Real GDP (Percent Change)                    4.6 1954-07-01\n 6  1954     7     1 Unemployment Rate                            5.8 1954-07-01\n 7  1954     7     1 Inflation Rate                              NA   1954-07-01\n 8  1954     8     1 Federal Funds Target Rate                   NA   1954-08-01\n 9  1954     8     1 Federal Funds Upper Target                  NA   1954-08-01\n10  1954     8     1 Federal Funds Lower Target                  NA   1954-08-01\n# … with 6,318 more rows, and abbreviated variable names\n#   ¹​`Rates of Specified Date`, ²​MonthDayYear\n```\n:::\n:::\n\nThis is an unexpected result!  The MonthDayYear column is the date datatype, as intended, but the order of the contents of the column is Year-Month-Day. Further refinement will be done in future challenges to rectify the order of the date.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}