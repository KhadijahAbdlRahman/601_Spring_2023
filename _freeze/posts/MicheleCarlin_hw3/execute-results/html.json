{
  "hash": "b200014430ca20f23afd9246095e222d",
  "result": {
    "markdown": "---\ntitle: \"2004-2013 USDA Certified Organic Egg and Chicken Prices \"\nauthor: \"Michele Carlin\"\ndesription: \"Imported, Tidied, and Summarized data\"\ndate: \"03/04/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - Michele Carlin\n  - organiceggpoultry.xls\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(summarytools)\nlibrary(dbplyr)\nlibrary(readxl)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\nRead in and view summary of 'organic egg poultry' dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsheet_names <- excel_sheets(\"_data/organiceggpoultry.xls\")\nsheet_names \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Data\"                            \"Organic egg prices, 2004-13\"    \n[3] \"Organic poultry prices, 2004-13\"\n```\n:::\n\n```{.r .cell-code}\norganic_data<-read_xls(\"_data/organiceggpoultry.xls\", skip = 5,            col_names= c(\"date\", \"xl_dozen\", \"xl_half\", \"lrg_dozen\", \"lrg_half\", \"delete\", \"chkn_whole\", \"chkn_boneless\", \"chkn_bonein\", \"chkn_legs\", \"chkn_thighs\"))%>%\n  select(!contains(\"delete\"))\nView(organic_data)\nview(dfSummary(organic_data))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpieAYA6\\file74785eb01180.html\n```\n:::\n:::\n\n\nThis dataset contains 120 rows and 10 columns.  Each row is for a particular month and year, and contains average prices by carton for 4 different 'egg' categories (e.g., XL dozen, XL half dozen, etc.) as well as the average price per pound for 5 different 'chicken' categories (e.g., whole, boneless, thighs, etc.). In order to have each row be one observation, we will need to use 'pivot long' however before doing so, we need to tidy up some of the variables based on findings in Data Frame Summary (e.g., remove extra characters in 'date' field).\n\n\nNumber of unique values in the variable 'date'\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(select(organic_data, date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndate\n      April      August    December    February February /1    Jan 2004 \n         10          10          10           8           2           1 \n   Jan 2005    Jan 2006    Jan 2007    Jan 2008    Jan 2009    Jan 2010 \n          1           1           1           1           1           1 \n   Jan 2011    Jan 2012    Jan 2013        July        June       March \n          1           1           1          10          10          10 \n        May    November     October   September \n         10          10          10          10 \n```\n:::\n:::\n\nSeparate date variable into month and year, remove '/1' from date variable and then fill 'year' variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norganic_data <- organic_data %>% \n  mutate(date = str_remove(date, \" /1\")) %>%\n  separate(col=date, into=c('month', 'year'), sep=' ') %>%\n    fill(year)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 110 rows [2, 3, 4, 5, 6,\n7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...].\n```\n:::\n\n```{.r .cell-code}\n select(organic_data, month, year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 2\n   month     year \n   <chr>     <chr>\n 1 Jan       2004 \n 2 February  2004 \n 3 March     2004 \n 4 April     2004 \n 5 May       2004 \n 6 June      2004 \n 7 July      2004 \n 8 August    2004 \n 9 September 2004 \n10 October   2004 \n# … with 110 more rows\n```\n:::\n:::\n\nPivot longer so that each row contains one observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norganic_data_long<-pivot_longer(organic_data, col = c(xl_dozen, xl_half, lrg_dozen, lrg_half, chkn_whole, chkn_boneless, chkn_bonein, chkn_legs, chkn_thighs),\n                 names_to=\"item\",\n                 values_to = \"value\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `pivot_longer()`:\n! Can't combine `xl_dozen` <double> and `chkn_bonein` <character>.\n```\n:::\n:::\n\n\nCouldn't pivot because some variables are numeric and others are string; filter out rows that have a value of 'too few' in chkn_bonein and chkn_thighs; check number of rows before and after.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(organic_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n\n```{.r .cell-code}\norganic_data <- organic_data %>%\n  filter(chkn_bonein != 'too few' & chkn_thighs != 'too few')\nnrow(organic_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 114\n```\n:::\n\n```{.r .cell-code}\norganic_data <- organic_data %>%\n  mutate(chkn_bonein = as.numeric(chkn_bonein)) %>%\n  mutate(chkn_thighs = as.numeric(chkn_thighs))\nstr(organic_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [114 × 11] (S3: tbl_df/tbl/data.frame)\n $ month        : chr [1:114] \"July\" \"August\" \"September\" \"October\" ...\n $ year         : chr [1:114] \"2004\" \"2004\" \"2004\" \"2004\" ...\n $ xl_dozen     : num [1:114] 241 241 241 241 241 241 241 241 241 241 ...\n $ xl_half      : num [1:114] 137 137 136 136 136 ...\n $ lrg_dozen    : num [1:114] 234 234 234 234 234 ...\n $ lrg_half     : num [1:114] 134 134 130 128 128 ...\n $ chkn_whole   : num [1:114] 217 217 217 217 217 217 217 217 217 217 ...\n $ chkn_boneless: num [1:114] 642 642 642 642 642 ...\n $ chkn_bonein  : num [1:114] 390 390 390 390 390 ...\n $ chkn_legs    : num [1:114] 204 204 204 204 204 ...\n $ chkn_thighs  : num [1:114] 200 200 200 200 200 ...\n```\n:::\n:::\n\nTry 'pivot longer' now that all variables are numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norganic_data_long <- pivot_longer(organic_data, col = c(xl_dozen, xl_half, lrg_dozen, lrg_half, chkn_whole, chkn_boneless, chkn_bonein, chkn_legs, chkn_thighs),\n                 names_to=\"item\",\n                 values_to = \"value\")\norganic_data_long\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,026 × 4\n   month  year  item          value\n   <chr>  <chr> <chr>         <dbl>\n 1 July   2004  xl_dozen       241 \n 2 July   2004  xl_half        137 \n 3 July   2004  lrg_dozen      234.\n 4 July   2004  lrg_half       134.\n 5 July   2004  chkn_whole     217 \n 6 July   2004  chkn_boneless  642.\n 7 July   2004  chkn_bonein    390.\n 8 July   2004  chkn_legs      204.\n 9 July   2004  chkn_thighs    200.\n10 August 2004  xl_dozen       241 \n# … with 1,016 more rows\n```\n:::\n\n```{.r .cell-code}\nview(dfSummary(organic_data_long))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpieAYA6\\file74786f4f5841.html\n```\n:::\n:::\n\nSummarize data - create new 'item_type' variable to group by.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norganic_data_long <- organic_data_long %>%\n mutate(item_type = case_when(startsWith(item, \"chkn\") ~ \"Chicken\", TRUE ~ \"Eggs\"))\nview(dfSummary(organic_data_long))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpieAYA6\\file74782bef5507.html\n```\n:::\n\n```{.r .cell-code}\norganic_data_long %>%\ngroup_by(item_type, item) %>%\n  summarise(Avg_Cost = mean(value),\n            Min_Cost = min(value),\n            Max_Cost = max(value))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'item_type'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n# Groups:   item_type [2]\n  item_type item          Avg_Cost Min_Cost Max_Cost\n  <chr>     <chr>            <dbl>    <dbl>    <dbl>\n1 Chicken   chkn_bonein       390.     390.     390.\n2 Chicken   chkn_boneless     656.     638.     704.\n3 Chicken   chkn_legs         204.     204.     204.\n4 Chicken   chkn_thighs       218.     200.     222 \n5 Chicken   chkn_whole        232.     217      248 \n6 Eggs      lrg_dozen         256.     234.     278.\n7 Eggs      lrg_half          156.     128.     178 \n8 Eggs      xl_dozen          269.     241      290 \n9 Eggs      xl_half           166.     136.     188.\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}