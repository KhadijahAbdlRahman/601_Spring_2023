{
  "hash": "cd7855d5a3321d96592e723c4709f131",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Poobigan Murugesan\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"05/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - poultry_tidy\n  - poobigan murugesan\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(readxl)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions.xlsx ⭐⭐⭐⭐⭐\n\nReading in poultry_tidy dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_excel(\"_data/poultry_tidy.xlsx\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 4\n   Product  Year Month     Price_Dollar\n   <chr>   <dbl> <chr>            <dbl>\n 1 Whole    2013 January           2.38\n 2 Whole    2013 February          2.38\n 3 Whole    2013 March             2.38\n 4 Whole    2013 April             2.38\n 5 Whole    2013 May               2.38\n 6 Whole    2013 June              2.38\n 7 Whole    2013 July              2.38\n 8 Whole    2013 August            2.38\n 9 Whole    2013 September         2.38\n10 Whole    2013 October           2.38\n# ℹ 590 more rows\n```\n:::\n:::\n\nDimensions of the dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 600   4\n```\n:::\n:::\n\nSummary of dataset\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Product               Year         Month            Price_Dollar  \n Length:600         Min.   :2004   Length:600         Min.   :1.935  \n Class :character   1st Qu.:2006   Class :character   1st Qu.:2.150  \n Mode  :character   Median :2008   Mode  :character   Median :2.350  \n                    Mean   :2008                      Mean   :3.390  \n                    3rd Qu.:2011                      3rd Qu.:3.905  \n                    Max.   :2013                      Max.   :7.037  \n                                                      NA's   :7      \n```\n:::\n:::\n\nWe can see that there are NaN values present so we further filter the data.\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(df,is.na(Price_Dollar))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 4\n  Product         Year Month    Price_Dollar\n  <chr>          <dbl> <chr>           <dbl>\n1 Bone-in Breast  2004 January            NA\n2 Bone-in Breast  2004 February           NA\n3 Bone-in Breast  2004 March              NA\n4 Bone-in Breast  2004 April              NA\n5 Bone-in Breast  2004 May                NA\n6 Bone-in Breast  2004 June               NA\n7 Thighs          2004 January            NA\n```\n:::\n:::\n\nUnique poultry product categories\n\n::: {.cell}\n\n```{.r .cell-code}\ndistinct(select(df, Product))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n  Product       \n  <chr>         \n1 Whole         \n2 B/S Breast    \n3 Bone-in Breast\n4 Whole Legs    \n5 Thighs        \n```\n:::\n:::\n\n### Briefly describe the data\nThis dataset of 600 rows and 4 columns, contains information about the prices of 5 different types of poultry cuts, namely  Bone-in Breast, B/S Breast, Thighs, Whole Legs, and Whole, on a monthly basis from January 2004 to December 2013. However from the summary it is evident that there are NaN values present in the dataset indicating that some of the prices from 2004 are not available.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? \n\nThe data is already tidy with each row containing the price during a specific month, year of a specific cut of meat.\n\n## Identify variables that need to be mutated\n\n\nThe data currently has separate columns for months and years. To sort the data chronologically, we need to add a date column. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1<-df %>%\n  mutate(date = str_c(Month, Year, sep=\" \"),\n         date = my(date))\ndf1<-select(df1, date, Product, Price_Dollar)\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 3\n   date       Product Price_Dollar\n   <date>     <chr>          <dbl>\n 1 2013-01-01 Whole           2.38\n 2 2013-02-01 Whole           2.38\n 3 2013-03-01 Whole           2.38\n 4 2013-04-01 Whole           2.38\n 5 2013-05-01 Whole           2.38\n 6 2013-06-01 Whole           2.38\n 7 2013-07-01 Whole           2.38\n 8 2013-08-01 Whole           2.38\n 9 2013-09-01 Whole           2.38\n10 2013-10-01 Whole           2.38\n# ℹ 590 more rows\n```\n:::\n:::\n\n\nThe first operation uses the mutate() function to create a new column called date. The str_c() function from the stringr package is used to concatenate the Month and Year columns, separated by a space. The my() function is then used to convert this concatenated string into a date object. Although the day of the month is set to the first for all observations, this will not affect the order of the data because it is consistent throughout the dataset. Therefore, we can use this new date column to sort the data chronologically.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}