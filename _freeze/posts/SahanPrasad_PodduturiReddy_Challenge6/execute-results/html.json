{
  "hash": "1091ca60a3bda0790f2dfa6736c8e926",
  "result": {
    "markdown": "---\ntitle: \"Analysis of Hotel Booking Numbers Over Time\"\nauthor: \"Sahan Prasad Podduturi Reddy\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"05/10/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - hotel_bookings\n  - Sahan Prasad Podduturi Reddy\n---\n\n\n## Introduction\n\nI was trying to analyze the 'hotel_bookings.csv' dataset. This dataset contains information about hotel bookings and reservations from . We first start by importing the necessary libraries and setting the working directory to point to the location where the spreadsheet is located. Then we read in the csv file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\n```\n:::\n\n\n## Read and Tidy Data\n\nWe first read in the csv file using read_csv(). We notice that there are 32 columns in the file. We are only trying to analyze the fluctuation in hotel bookings at different points in time. Since every column in our file corresponds to a hotel booking, we just need the `arrival_date_year`, `arrival_date_month`, `arrival_date_day_of_month` columns for our analysis. Since the month column in the dataset is a String, we write a simple function to convert it to the corresponding month number. We then use the resultant column to calculate a single column - `arrival_date` with (yyyy-mm-dd) format. We then group by this column and calculate `Daily Bookings` and cumulative `Total Bookings`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\nbookings <- read_csv(\"hotel_bookings.csv\")\n\nmonth_name_number <- function(month_name) {\n  match(month_name, month.name)\n}\n\nbookings_one <- bookings %>% \n  select(\"arrival_date_year\", \"arrival_date_month\", \"arrival_date_day_of_month\") %>%\n  mutate(arrival_month_number = month_name_number(arrival_date_month)) %>% \n  mutate(arrival_date = as.Date(paste(arrival_date_year, arrival_month_number, arrival_date_day_of_month, sep = \"-\"))) %>%\n  group_by(arrival_date) %>% summarize(\"Daily Bookings\" = n()) %>% ungroup() %>%\n  mutate(\"Total Bookings\"=cumsum(`Daily Bookings`))\nbookings_one\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 793 × 3\n   arrival_date `Daily Bookings` `Total Bookings`\n   <date>                  <int>            <int>\n 1 2015-07-01                122              122\n 2 2015-07-02                 93              215\n 3 2015-07-03                 56              271\n 4 2015-07-04                 88              359\n 5 2015-07-05                 53              412\n 6 2015-07-06                 75              487\n 7 2015-07-07                 54              541\n 8 2015-07-08                 69              610\n 9 2015-07-09                 80              690\n10 2015-07-10                 51              741\n# … with 783 more rows\n```\n:::\n:::\n\n\n## Time Series Graph\n\nWe first plot a double line time-series graph with Date of Arrival on the X-axis. The GREEEN line depicts the number of booking on a particular day while the \"BLUE\" line depicts the cumulative total number of bookings uptil that day. We notice a trend here - The number of bookings are lower at the start and end of the year and usually peak during some months in the middle. Specifically, we can see that there is a spike around the April-May and July-August time periods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbookings_one %>% ggplot(aes(x = arrival_date)) +\n  geom_line(aes(y = `Daily Bookings`), color=\"lightgreen\") +\n  geom_line(aes(y = `Total Bookings`/310), color=\"cyan\") + \n  scale_y_continuous(\n    \n    # Features of the first axis\n    name = \"Daily Bookings\",\n    \n    # Add a second axis and specify its features\n    sec.axis = sec_axis(~.*310, name=\"Total Bookings\")\n  ) +\n  labs(title = \"Hotel Bookings - July, 2015 to September, 2017\", x=\"Year-Month\")\n```\n\n::: {.cell-output-display}\n![](SahanPrasad_PodduturiReddy_Challenge6_files/figure-html/TimeSeries-1.png){width=672}\n:::\n:::\n\n\n## Part-Whole Graph\n\nTo confirm our analysis from the previous graph, we continue with our previous dataframe and group by `hotel` and `arrival_date` columns. Then, we will obtain month numbers from our `arrival_date` and group by the month number and summing up the `Daily Bookings` column so that we get total Booking numbers corresponding to every month number in our dataset. We use a grouped bar graph and fill in the color for every hotel category. So we get a stacked view of total number of city and resort hotel bookings per month. From the graph we confirm our initial analysis. We notice that the bookings are highest in the months of May, July and August.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbookings_two <- bookings %>% \n  select(\"hotel\", \"arrival_date_year\", \"arrival_date_month\", \"arrival_date_day_of_month\") %>%\n  mutate(arrival_month_number = month_name_number(arrival_date_month)) %>% \n  mutate(arrival_date = as.Date(paste(arrival_date_year, arrival_month_number, arrival_date_day_of_month, sep = \"-\"))) %>%\n  group_by(hotel, arrival_date) %>% summarize(\"Daily Bookings\" = n()) %>% ungroup() %>%\n  mutate(\"Total Bookings\"=cumsum(`Daily Bookings`)) %>%\n  mutate(arrival_month = month(arrival_date)) %>%\n  group_by(hotel, arrival_month) %>% arrange(arrival_month) %>% summarize(\"Bookings Per Month\" = sum(`Daily Bookings`))\nbookings_two\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 3\n# Groups:   hotel [2]\n   hotel      arrival_month `Bookings Per Month`\n   <chr>              <dbl>                <int>\n 1 City Hotel             1                 3736\n 2 City Hotel             2                 4965\n 3 City Hotel             3                 6458\n 4 City Hotel             4                 7480\n 5 City Hotel             5                 8232\n 6 City Hotel             6                 7894\n 7 City Hotel             7                 8088\n 8 City Hotel             8                 8983\n 9 City Hotel             9                 7400\n10 City Hotel            10                 7605\n# … with 14 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(bookings_two, aes(fill=hotel, y=`Bookings Per Month`, x=arrival_month)) + \n    geom_bar(position=\"stack\", stat=\"identity\")\n```\n\n::: {.cell-output-display}\n![](SahanPrasad_PodduturiReddy_Challenge6_files/figure-html/PartWhole-1.png){width=672}\n:::\n:::",
    "supporting": [
      "SahanPrasad_PodduturiReddy_Challenge6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}