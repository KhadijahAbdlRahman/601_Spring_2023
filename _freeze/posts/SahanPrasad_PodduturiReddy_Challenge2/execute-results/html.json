{
  "hash": "634ebdb97d7371642d072029fe012b3a",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2 Solution\"\nauthor: \"Sahan Prasad Podduturi Reddy\"\ndesription: \"Data wrangling: using group() and summarise()\"\ndate: \"03/15/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_2\n  - birds.csv\n  - Sahan Prasad Podduturi Reddy\n---\n\n## Introduction\n\nI was trying to analyze the 'birds.csv' dataset by splitting the data into different subgroups in order to interpret the meaning of the results. This dataset summarizes the population size of wild bird species based on their body weight. We first start by importing the necessary libraries and setting the working directory to point to the location where the spreadsheet is located.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(DescTools)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\n```\n:::\n\n\n## Read in the Data\n\nNotice that there are 14 columns in the birds.csv file. We can first try to drop out some columns which contain redundant information.(i.e. columns containing same values for all rows). We can do this by defining a function to print out the number of unique values for a column in the dataframe and then applying the function to every columns.\nWe notice that Domain Code, Domain, Element Code, Element and Unit have only 1 unique value. So we can remove these columns from our dataframe.\nWe know that all rows of data refers to Poultry Stocks regarding Live Animals.\nWe also know there is a 1:1 mapping between Area Code,Area & Item Code, Item & Year Code, Year & Flag, Flag Description.\nWe can remove more columns to make our analysis task easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"D:/MyDocs/Class Slides/DACSS601/601_Spring_2023/posts/_data\")\ndataframe <- read_csv(\"birds.csv\")\nprint(dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1961  1961\n 2 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1962  1962\n 3 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1963  1963\n 4 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1964  1964\n 5 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1965  1965\n 6 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1966  1966\n 7 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1967  1967\n 8 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1968  1968\n 9 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1969  1969\n10 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1970  1970\n# … with 30,967 more rows, 4 more variables: Unit <chr>, Value <dbl>,\n#   Flag <chr>, `Flag Description` <chr>, and abbreviated variable names\n#   ¹​`Domain Code`, ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\n#Domain Code, Domain, Element Code, Element, Unit | Area Code, Area | Item Code, Item\n# Year Code, Year | Flag, Flag Description | Value\nnum_unique <- apply(dataframe, 2, function(x) length(unique(x)))\nprint(num_unique)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Domain Code           Domain        Area Code             Area \n               1                1              248              248 \n    Element Code          Element        Item Code             Item \n               1                1                5                5 \n       Year Code             Year             Unit            Value \n              58               58                1            11496 \n            Flag Flag Description \n               6                6 \n```\n:::\n\n```{.r .cell-code}\ndataframe <- select(dataframe, -'Domain', -'Domain Code', -'Element Code', -'Element', -'Unit')\ndataframe <- select(dataframe, -'Area Code', -'Item Code', -'Year Code', -'Flag')\nprint(dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 5\n   Area        Item      Year Value `Flag Description`\n   <chr>       <chr>    <dbl> <dbl> <chr>             \n 1 Afghanistan Chickens  1961  4700 FAO estimate      \n 2 Afghanistan Chickens  1962  4900 FAO estimate      \n 3 Afghanistan Chickens  1963  5000 FAO estimate      \n 4 Afghanistan Chickens  1964  5300 FAO estimate      \n 5 Afghanistan Chickens  1965  5500 FAO estimate      \n 6 Afghanistan Chickens  1966  5800 FAO estimate      \n 7 Afghanistan Chickens  1967  6600 FAO estimate      \n 8 Afghanistan Chickens  1968  6290 Official data     \n 9 Afghanistan Chickens  1969  6300 FAO estimate      \n10 Afghanistan Chickens  1970  6000 FAO estimate      \n# … with 30,967 more rows\n```\n:::\n:::\n\n\n## Grouping by Item -  Summary Statistics and Analysis\n\nTwo different groupings were done.\n\n1) We first group the dataset based on Item. This gives us the 5 different types of stocks based on which the data was collected. Then we can use the summarise function in order to calculate the average stock price, median stock price, standard_deviation, minimum value, maximum value, 1st and 3rd quartile values for the stocks grouped by Item.\nLooking at the resulting table, we find that the average value for Chicken stock is orders of magnitude higher than the stock average for the other 4 stock types. This shows that the demand for chicken over the world is a lot higher than all the other types of live animals.\n\nThe mean values for all stocks in this grouping is also much higher than the median values for the stock types implying that the distribution is very skewed towards the right. There are some countries contributing a large increase to the average while there a lot of smaller values. The high standard deviation indicates that the data is very spread out and not concentrated around the mean. The maximum value is also much higher than the mean indicating the data is skewed to the right by a few outliers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by_item <-\ndataframe %>%\n  group_by(Item) %>%\n  select(Value) %>%\n  summarise(avg_stocks = mean(Value, na.rm=TRUE),\n            med_stocks = median(Value, na.rm=TRUE),\n            std_dev = sd(Value, na.rm=TRUE),\n            min_value = min(Value, na.rm=TRUE),\n            max_value = max(Value, na.rm=TRUE),\n            first_q = quantile(Value, 0.25, na.rm=TRUE),\n            third_q = quantile(Value, 0.75, na.rm=TRUE))\nprint(group_by_item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n  Item                   avg_s…¹ med_s…² std_dev min_v…³ max_v…⁴ first_q third_q\n  <chr>                    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Chickens               207931.  10784.  1.08e6       0  2.37e7   1136.  53794.\n2 Ducks                   23072.    510   1.11e5       0  1.20e6     61    4700 \n3 Geese and guinea fowls  10292.    258   4.45e4       0  3.91e5     41    1561 \n4 Pigeons, other birds     6163.   2800   8.48e3       0  5.79e4   1034.   7600 \n5 Turkeys                 15228.    528   5.64e4       0  4.74e5     93    3186.\n# … with abbreviated variable names ¹​avg_stocks, ²​med_stocks, ³​min_value,\n#   ⁴​max_value\n```\n:::\n:::\n\n## Grouping by Year -  Summary Statistics and Analysis\n\n2) The second grouping we perform is for the mean and median stock prices over the years from 1961 to 2018. This was conducted in order to find out how the stock prices have fluctuated over the years. We notice there are 4 years in total where the avg_stock price has dropped below the last years stock price. All the other years, there has been an increase in stock price ranging from 0.5% all the way to 7%. This gradual increase in stock prices has led to the current price. The median price fluctuates frequently rising and falling over the years. The median is also very low compared to the mean price indicating once again the presence of large outliers in the dataset over the years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by_year <-\ndataframe %>%\n  group_by(Year) %>%\n  select(Value) %>%\n  summarise(avg_stocks = mean(Value, na.rm=TRUE),\n            med_stocks = median(Value, na.rm=TRUE)) %>%\n  arrange(Year)\n\ndiff_avg <- diff(group_by_year[[\"avg_stocks\"]])\nvec_diff_avg <- append(diff_avg,0, after=0)\ngroup_by_year['percent increase avg_stocks'] <- (vec_diff_avg/group_by_year$avg_stocks) * 100\n\ndiff_med <- diff(group_by_year[[\"med_stocks\"]])\nvec_diff_med <- append(diff_med,0, after=0)\ngroup_by_year['percent increase med_stocks'] <- (vec_diff_med/group_by_year$med_stocks) * 100\nprint(arrange(group_by_year, desc(`Year`)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 5\n    Year avg_stocks med_stocks `percent increase avg_stocks` percent increase …¹\n   <dbl>      <dbl>      <dbl>                         <dbl>               <dbl>\n 1  2018    182869.      2830.                         2.01                2.35 \n 2  2017    179186.      2764                          1.49               -1.23 \n 3  2016    176523.      2798                          4.81                2.27 \n 4  2015    168025.      2734.                         2.51                1.72 \n 5  2014    163801.      2688.                         0.525               4.22 \n 6  2013    162941.      2574                          1.87                8.62 \n 7  2012    159890.      2352                          2.78               -0.638\n 8  2011    155450.      2367                         -1.97                7.06 \n 9  2010    158517.      2200                          2.72               -0.318\n10  2009    154205.      2207                          3.47               -0.498\n# … with 48 more rows, and abbreviated variable name\n#   ¹​`percent increase med_stocks`\n```\n:::\n\n```{.r .cell-code}\ny <- group_by_year$avg_stocks\nx <- group_by_year$Year\nplot(x, y, type = \"l\")\n```\n\n::: {.cell-output-display}\n![](SahanPrasad_PodduturiReddy_Challenge2_files/figure-html/GroupingTwo-1.png){width=672}\n:::\n\n```{.r .cell-code}\ny <- group_by_year$med_stocks\nx <- group_by_year$Year\nplot(x, y, type = \"l\")\n```\n\n::: {.cell-output-display}\n![](SahanPrasad_PodduturiReddy_Challenge2_files/figure-html/GroupingTwo-2.png){width=672}\n:::\n:::",
    "supporting": [
      "SahanPrasad_PodduturiReddy_Challenge2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}