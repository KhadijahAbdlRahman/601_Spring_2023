{
  "hash": "2e1abfb61c827798b32146639f7a5d32",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"FNU Avinesh Krishnan\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"05/15/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - FNU Avinesh Krishnan\n  - animal_weight\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nweightdata <- read_csv(\"~/Desktop/601_Spring_2023/posts/_data/animal_weight.csv\")\n```\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(weightdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 17\n  IPCC A‚Ä¶¬π Cattl‚Ä¶¬≤ Cattl‚Ä¶¬≥ Buffa‚Ä¶‚Å¥ Swine‚Ä¶‚Åµ Swine‚Ä¶‚Å∂ Chick‚Ä¶‚Å∑ Chick‚Ä¶‚Å∏ Ducks Turkeys\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian ‚Ä¶     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern‚Ä¶     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western‚Ä¶     600     420     380      50     198     0.9     1.8   2.7     6.8\n6 Latin A‚Ä¶     400     305     380      28      28     0.9     1.8   2.7     6.8\n# ‚Ä¶ with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <dbl>, Asses <dbl>,\n#   Mules <dbl>, Camels <dbl>, Llamas <dbl>, and abbreviated variable names\n#   ¬π‚Äã`IPCC Area`, ¬≤‚Äã`Cattle - dairy`, ¬≥‚Äã`Cattle - non-dairy`, ‚Å¥‚ÄãBuffaloes,\n#   ‚Åµ‚Äã`Swine - market`, ‚Å∂‚Äã`Swine - breeding`, ‚Å∑‚Äã`Chicken - Broilers`,\n#   ‚Å∏‚Äã`Chicken - Layers`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(weightdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 17\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(weightdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [9 √ó 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ IPCC Area         : chr [1:9] \"Indian Subcontinent\" \"Eastern Europe\" \"Africa\" \"Oceania\" ...\n $ Cattle - dairy    : num [1:9] 275 550 275 500 600 400 350 275 604\n $ Cattle - non-dairy: num [1:9] 110 391 173 330 420 305 391 173 389\n $ Buffaloes         : num [1:9] 295 380 380 380 380 380 380 380 380\n $ Swine - market    : num [1:9] 28 50 28 45 50 28 50 28 46\n $ Swine - breeding  : num [1:9] 28 180 28 180 198 28 180 28 198\n $ Chicken - Broilers: num [1:9] 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9\n $ Chicken - Layers  : num [1:9] 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.8\n $ Ducks             : num [1:9] 2.7 2.7 2.7 2.7 2.7 2.7 2.7 2.7 2.7\n $ Turkeys           : num [1:9] 6.8 6.8 6.8 6.8 6.8 6.8 6.8 6.8 6.8\n $ Sheep             : num [1:9] 28 48.5 28 48.5 48.5 28 48.5 28 48.5\n $ Goats             : num [1:9] 30 38.5 30 38.5 38.5 30 38.5 30 38.5\n $ Horses            : num [1:9] 238 377 238 377 377 238 377 238 377\n $ Asses             : num [1:9] 130 130 130 130 130 130 130 130 130\n $ Mules             : num [1:9] 130 130 130 130 130 130 130 130 130\n $ Camels            : num [1:9] 217 217 217 217 217 217 217 217 217\n $ Llamas            : num [1:9] 217 217 217 217 217 217 217 217 217\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `IPCC Area` = col_character(),\n  ..   `Cattle - dairy` = col_double(),\n  ..   `Cattle - non-dairy` = col_double(),\n  ..   Buffaloes = col_double(),\n  ..   `Swine - market` = col_double(),\n  ..   `Swine - breeding` = col_double(),\n  ..   `Chicken - Broilers` = col_double(),\n  ..   `Chicken - Layers` = col_double(),\n  ..   Ducks = col_double(),\n  ..   Turkeys = col_double(),\n  ..   Sheep = col_double(),\n  ..   Goats = col_double(),\n  ..   Horses = col_double(),\n  ..   Asses = col_double(),\n  ..   Mules = col_double(),\n  ..   Camels = col_double(),\n  ..   Llamas = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(weightdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"IPCC Area\"          \"Cattle - dairy\"     \"Cattle - non-dairy\"\n [4] \"Buffaloes\"          \"Swine - market\"     \"Swine - breeding\"  \n [7] \"Chicken - Broilers\" \"Chicken - Layers\"   \"Ducks\"             \n[10] \"Turkeys\"            \"Sheep\"              \"Goats\"             \n[13] \"Horses\"             \"Asses\"              \"Mules\"             \n[16] \"Camels\"             \"Llamas\"            \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nweightdata %>% \n  select(`IPCC Area`) %>% \n  distinct(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 √ó 1\n  `IPCC Area`        \n  <chr>              \n1 Indian Subcontinent\n2 Eastern Europe     \n3 Africa             \n4 Oceania            \n5 Western Europe     \n6 Latin America      \n7 Asia               \n8 Middle east        \n9 Northern America   \n```\n:::\n:::\n\n\n\nThe data represents information on livestock populations across different regions. The data includes the following cases and variables:\n\nEach row represents a specific region or area.\nVariables:\nIPCC Area: The geographical area or region under consideration.\nCattle - dairy: Population count of dairy cattle in the region.\nCattle - non-dairy: Population count of non-dairy cattle in the region.\nBuffaloes: Population count of buffaloes in the region.\nSwine - market: Population count of market swine (pigs) in the region.\nSwine - breeding: Population count of breeding swine (pigs) in the region.\nChicken - Broilers: Population count of broiler chickens in the region.\nChicken - Layers: Population count of layer chickens in the region.\nDucks: Population count of ducks in the region.\nTurkeys: Population count of turkeys in the region.\nSheep: Population count of sheep in the region.\nGoats: Population count of goats in the region.\nHorses: Population count of horses in the region.\nAsses: Population count of asses (donkeys) in the region.\nMules: Population count of mules in the region.\nCamels: Population count of camels in the region.\nLlamas: Population count of llamas in the region.\nThe data provides an overview of livestock populations in various regions, including Western Europe, Oceania, Northern America, Middle East, Latin America, Indian Subcontinent, Eastern Europe, Asia, and Africa. It presents the population counts for different types of livestock in each region.\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n\nWe will utilize the function pivot_longer() to transform the data. Each of the 16 animal types will be listed under a column named \"Animals,\" and their corresponding weights will be listed under a column named \"Weight.\" This transformation will result in a longer version of the current tibble, where each IPCC area (geographic region) will appear 16 times, representing each animal type. With the current 9 IPCC areas, the resulting tibble will have 144 rows and 3 columns: IPCC area, Animals, and Weight.\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA     653.    852. \n2 USA      1990 NAFTA    1432.    886. \n3 France   1980 EU       1421.   1260. \n4 Mexico   1990 NAFTA     697.    764. \n5 USA      1980 NAFTA    1855.    -57.5\n6 France   1990 EU        933.  -1187. \n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              653. \n 2 Mexico   1980 NAFTA incoming              852. \n 3 USA      1990 NAFTA outgoing             1432. \n 4 USA      1990 NAFTA incoming              886. \n 5 France   1980 EU    outgoing             1421. \n 6 France   1980 EU    incoming             1260. \n 7 Mexico   1990 NAFTA outgoing              697. \n 8 Mexico   1990 NAFTA incoming              764. \n 9 USA      1980 NAFTA outgoing             1855. \n10 USA      1980 NAFTA incoming              -57.5\n11 France   1990 EU    outgoing              933. \n12 France   1990 EU    incoming            -1187. \n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\nWe will perform a pivot operation on columns 2 through 17 that describe animal weights. This will create a new column called \"Animals\" which will contain the names of each animal column (e.g., Cattle - dairy, Cattle - non-dairy, etc.). The original column values will be moved to a new column titled \"Weight\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivoted_data<-weightdata %>% \npivot_longer(col = c(2:17),names_to=\"Animals\",values_to = \"Weight\")\npivoted_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 √ó 3\n   `IPCC Area`         Animals            Weight\n   <chr>               <chr>               <dbl>\n 1 Indian Subcontinent Cattle - dairy      275  \n 2 Indian Subcontinent Cattle - non-dairy  110  \n 3 Indian Subcontinent Buffaloes           295  \n 4 Indian Subcontinent Swine - market       28  \n 5 Indian Subcontinent Swine - breeding     28  \n 6 Indian Subcontinent Chicken - Broilers    0.9\n 7 Indian Subcontinent Chicken - Layers      1.8\n 8 Indian Subcontinent Ducks                 2.7\n 9 Indian Subcontinent Turkeys               6.8\n10 Indian Subcontinent Sheep                28  \n# ‚Ä¶ with 134 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(pivoted_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144   3\n```\n:::\n:::\n\nAfter performing the pivot_longer operation on the data, the resulting tibble has dimensions of 144 rows and 3 columns, which aligns with our expectations.\n\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}