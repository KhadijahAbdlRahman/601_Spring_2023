{
  "hash": "fdd3f852f7901318720b653bc9a7ad4f",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4: Hotel Bookings\"\nauthor: \"Teresa Lardo\"\ndescription: \"Using mutate and lubridate to consolidate data\"\ndate: \"03/21/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - Teresa Lardo\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n\n## Read in data\n\nFor this challenge, we'll read in the csv file on hotel bookings. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nhotel_bookings <- read_csv(\"_data/hotel_bookings.csv\", show_col_types = FALSE)\n```\n:::\n\n\n### Briefly describe the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hotel_bookings, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n\n```{.r .cell-code}\ntail(hotel_bookings, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 City …       0      44    2017 August       35      31       1       3      2\n 2 City …       0     188    2017 August       35      31       2       3      2\n 3 City …       0     135    2017 August       35      30       2       4      3\n 4 City …       0     164    2017 August       35      31       2       4      2\n 5 City …       0      21    2017 August       35      30       2       5      2\n 6 City …       0      23    2017 August       35      30       2       5      2\n 7 City …       0     102    2017 August       35      31       2       5      3\n 8 City …       0      34    2017 August       35      31       2       5      2\n 9 City …       0     109    2017 August       35      31       2       5      2\n10 City …       0     205    2017 August       35      29       2       7      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     32\n```\n:::\n:::\n\n\nThe data set describes just under 120,000 bookings at two hotels over the course of 2 years - July 2015 through August 2017. There are 32 variables. \n\n## Identify variables that need to be mutated\n\n\nThis data set has many variables, and some of them can be combined. For instance, the **arrival date** for each booking is broken into 4 different variables - year of arrival, month of arrival, day of the month of arrival, and week of the year of arrival. These could be used to break down the data and create visualizations showing which months or even weeks of the year are the most/least booked, but that's still a lot of variables just to answer the question \"when does the customer plan to show up?\" \n\n### Create a single Arrival Date column\n\nWe can use the `mutate()` and `make_date()` functions to turn some of these columns into a single column that lists the entire date in a date format. Because the column showing the expected month of arrival uses the names of the months - July, August, etc. - instead of the number of the month (1-12), the values in that column will also have to be altered so we can use the `make_date()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dplyr and lubridate from the library to enable the piping operator and the make_date function\nlibrary(dplyr)\nlibrary(lubridate)\nhotel_bookings <- hotel_bookings %>%\n# Use mutate and case_when to change the month values from names to numbers  \n    mutate(month = case_when(\n       arrival_date_month == \"January\" ~ 1,\n       arrival_date_month == \"February\" ~ 2,\n       arrival_date_month == \"March\" ~ 3,\n       arrival_date_month == \"April\" ~ 4,\n       arrival_date_month == \"May\" ~ 5,\n       arrival_date_month == \"June\" ~ 6,\n       arrival_date_month == \"July\" ~ 7,\n       arrival_date_month == \"August\" ~ 8,\n       arrival_date_month == \"September\" ~ 9,\n       arrival_date_month == \"October\" ~ 10,\n       arrival_date_month == \"November\" ~ 11,\n       arrival_date_month == \"December\" ~ 12,\n     )) %>%\n# Use the year, day, and new month columns to create a new column showing the entire arrival date\n    mutate(arrival_date = make_date(arrival_date_year, month, arrival_date_day_of_month)) %>%\n# Use select to remove the extraneous date columns\n    select(-c(arrival_date_year, arrival_date_month, arrival_date_day_of_month, month, arrival_date_week_number)) %>%\n# Use select to move the new arrival_date column closer to the left side of the data set\n    select(hotel, arrival_date, everything())\n```\n:::\n\n\n\nBecause we've removed 4 of the original date columns (year, month, day, and week) and added one new column to show the entire date of expected arrival, the number of columns (variables) in our data set should change from **32** to **29**. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     29\n```\n:::\n:::\n\n\nUsing the `dim()` function confirms our new number of variables. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 29\n  hotel   arrival_…¹ is_ca…² lead_…³ stays…⁴ stays…⁵ adults child…⁶ babies meal \n  <chr>   <date>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr>\n1 Resort… 2015-07-01       0     342       0       0      2       0      0 BB   \n2 Resort… 2015-07-01       0     737       0       0      2       0      0 BB   \n3 Resort… 2015-07-01       0       7       0       1      1       0      0 BB   \n4 Resort… 2015-07-01       0      13       0       1      1       0      0 BB   \n5 Resort… 2015-07-01       0      14       0       2      2       0      0 BB   \n6 Resort… 2015-07-01       0      14       0       2      2       0      0 BB   \n# … with 19 more variables: country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\n### Combine Week & Weekend Night columns into a single Total Nights column\n\nOne other thing we can do to make our data more concise is to combine the columns that show the number of weekend nights and week nights. We can mutate those two columns into one that shows simply the **total number of nights** of the booked stay. If we add a new Total Nights column and remove the two original columns, we should have **28** columns. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings <- hotel_bookings %>%\n# Mutate new column that adds the values from the weekend/week night columns\n  mutate(total_nights = stays_in_weekend_nights + stays_in_week_nights) %>%\n# Remove the original columns\n  select(-c(stays_in_weekend_nights, stays_in_week_nights)) %>%\n# Rearrange the order of the columns\n  select(hotel, arrival_date, is_canceled, lead_time, total_nights, everything())\n```\n:::\n\n\nLet's use the `dim()` function for a quick sanity check.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     28\n```\n:::\n:::\n\n\n**28** columns confirmed! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 28\n  hotel   arrival_…¹ is_ca…² lead_…³ total…⁴ adults child…⁵ babies meal  country\n  <chr>   <date>       <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr> <chr>  \n1 Resort… 2015-07-01       0     342       0      2       0      0 BB    PRT    \n2 Resort… 2015-07-01       0     737       0      2       0      0 BB    PRT    \n3 Resort… 2015-07-01       0       7       1      1       0      0 BB    GBR    \n4 Resort… 2015-07-01       0      13       1      1       0      0 BB    GBR    \n5 Resort… 2015-07-01       0      14       2      2       0      0 BB    GBR    \n6 Resort… 2015-07-01       0      14       2      2       0      0 BB    GBR    \n# … with 18 more variables: market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}