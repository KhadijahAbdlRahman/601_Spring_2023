---
title: "Challenge 8"
author: "Matthew Weiner"
description: "Joining Data"
date: "05/15/2023"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - Matthew_Weiner
  - challenge_8
  - snl
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1)  read in multiple data sets, and describe the data set using both words and any supporting information (e.g., tables, etc)
2)  tidy data (as needed, including sanity checks)
3)  mutate variables as needed (including sanity checks)
4)  join two or more data sets and analyze some aspect of the joined data

(be sure to only include the category tags for the data you use!)

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

  - military marriages ⭐⭐
  - faostat ⭐⭐
  - railroads  ⭐⭐⭐
  - fed_rate ⭐⭐⭐
  - debt ⭐⭐⭐
  - us_hh ⭐⭐⭐⭐
  - snl ⭐⭐⭐⭐⭐

```{r}
library(readr)
actors <- read_csv("_data/snl_actors.csv")
casts <- read_csv("_data/snl_casts.csv")
seasons <- read_csv("_data/snl_seasons.csv")

```

```{r}
head(actors)
colnames(actors)

head(casts)
colnames(casts)

head(seasons)
colnames(seasons)
```

```{r}
dim(actors)
dim(casts)
dim(seasons)
```

### Briefly describe the data

These datasets contain various information about the television program, Saturday Night Live (SNL). The `snl_casts` dataset contains information on the episodes and seasons in which each actor was cast. The `snl_seasons` dataset contains information about each season such as the number of episodes, when the first and last episode airs, and the year that the season started. Finally, the `snl_actors` dataset contains information about each actor that appeared in SNL such as their role and the type of appearance. The actors dataset contains 2306 rows and 4 columns, while the casts dataset contains 614 rows and 8 columns. Finally, the seasons dataset contains just 46 rows and 5 columns.

## Tidy Data (as needed)

The first thing we want to check is if there is any missing data in any of the three datasets.

```{r}
sum(is.na(actors))

sum(is.na(casts))

sum(is.na(seasons))
```

We can indeed see that both the actors dataset and the casts dataset contain rows with missing values. However, at this point we are going to allow these rows to remain in the dataset to prevent the loss of otherwise useful information.

Another thing we can do to tidy up our dataset is re-format the start and end date of the seasons. Currently, they are in a format where the date is being stored as a `dbl` however we would rather these be a date object. We can mutate the data to accomplish this:

```{r}
library(dplyr)

seasons <- mutate(seasons,first_epid = as.Date(as.character(first_epid),format="%Y%m%d"), last_epid = as.Date(as.character(last_epid), format = "%Y%m%d"))

#sanity check
table(seasons$first_epid)

table(seasons$last_epid)
```

We can also apply this to the casts dataset:
```{r}
casts <- mutate(casts,first_epid = as.Date(as.character(first_epid),format="%Y%m%d"), last_epid = as.Date(as.character(last_epid), format = "%Y%m%d"))

#sanity check

table(casts$first_epid)

table(seasons$last_epid)
```


## Join Data

I intend to join the seasons and casts dataset based on the season ID, `sid`, and then join this with the actors dataset based on the actor ID, `aid`.

```{r}
seasons_casts <- seasons %>% left_join(casts,by="sid")

#sanity check 
seasons_casts
colnames(seasons_casts)
```

Now we will join with the actors dataset:

```{r}
seasons_casts_actors <- seasons_casts %>% 
  left_join(actors, by = "aid")

#sanity check
seasons_casts_actors
colnames(seasons_casts_actors)
```


Now that we have properly joined these datsets together we can attempt to gain more insights into the data. 

For example, one interesting thing we could do is to look at the number of episodes per season for each gender:

```{r}
library(ggplot2)
ggplot(data = seasons_casts_actors, aes(x = year, y = n_episodes.y, fill = gender)) +
  geom_bar(stat = "identity") +
  labs(x = "Year", y = "Number of Episodes", title = "Number of Episodes per Season") +
  theme_minimal()
```



