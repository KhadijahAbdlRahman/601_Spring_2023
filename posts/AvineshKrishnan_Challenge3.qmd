---
title: "Challenge 3"
author: "FNU Avinesh Krishnan"
description: "Tidy Data: Pivoting"
date: "05/15/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - FNU Avinesh Krishnan
  - animal_weight
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê
-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê
-   australian_marriage\*.xls ‚≠ê‚≠ê‚≠ê
-   USA Households\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê
-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü

```{r}
library(readr)
weightdata <- read_csv("~/Desktop/601_Spring_2023/posts/_data/animal_weight.csv")
```

### Briefly describe the data

Describe the data, and be sure to comment on why you are planning to pivot it to make it "tidy"

```{r}
head(weightdata)
```

```{r}
dim(weightdata)
```

```{r}
str(weightdata)
```

```{r}
colnames(weightdata)
```

```{r}
weightdata %>% 
  select(`IPCC Area`) %>% 
  distinct(.)
```


The data represents information on livestock populations across different regions. The data includes the following cases and variables:

Each row represents a specific region or area.
Variables:
IPCC Area: The geographical area or region under consideration.
Cattle - dairy: Population count of dairy cattle in the region.
Cattle - non-dairy: Population count of non-dairy cattle in the region.
Buffaloes: Population count of buffaloes in the region.
Swine - market: Population count of market swine (pigs) in the region.
Swine - breeding: Population count of breeding swine (pigs) in the region.
Chicken - Broilers: Population count of broiler chickens in the region.
Chicken - Layers: Population count of layer chickens in the region.
Ducks: Population count of ducks in the region.
Turkeys: Population count of turkeys in the region.
Sheep: Population count of sheep in the region.
Goats: Population count of goats in the region.
Horses: Population count of horses in the region.
Asses: Population count of asses (donkeys) in the region.
Mules: Population count of mules in the region.
Camels: Population count of camels in the region.
Llamas: Population count of llamas in the region.
The data provides an overview of livestock populations in various regions, including Western Europe, Oceania, Northern America, Middle East, Latin America, Indian Subcontinent, Eastern Europe, Asia, and Africa. It presents the population counts for different types of livestock in each region.


## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!


We will utilize the function pivot_longer() to transform the data. Each of the 16 animal types will be listed under a column named "Animals," and their corresponding weights will be listed under a column named "Weight." This transformation will result in a longer version of the current tibble, where each IPCC area (geographic region) will appear 16 times, representing each animal type. With the current 9 IPCC areas, the resulting tibble will have 144 rows and 3 columns: IPCC area, Animals, and Weight.

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

Document your work here.

```{r}


```

Any additional comments?

## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data

Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?

We will perform a pivot operation on columns 2 through 17 that describe animal weights. This will create a new column called "Animals" which will contain the names of each animal column (e.g., Cattle - dairy, Cattle - non-dairy, etc.). The original column values will be moved to a new column titled "Weight".

```{r}
pivoted_data<-weightdata %>% 
pivot_longer(col = c(2:17),names_to="Animals",values_to = "Weight")
pivoted_data
```

```{r}
dim(pivoted_data)
```
After performing the pivot_longer operation on the data, the resulting tibble has dimensions of 144 rows and 3 columns, which aligns with our expectations.


Any additional comments?
